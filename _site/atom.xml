<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Deox Labs</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2025-02-25T14:31:22+05:30</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Creating a Fintech AI agent without any framework</title>
   <link href="http://localhost:4000/2025/02/23/create-a-fintech-agent"/>
   <updated>2025-02-23T00:00:00+05:30</updated>
   <id>http://localhost:4000/2025/02/23/create-a-fintech-agent</id>
   <content type="html">&lt;p&gt;AI agents are everywhere, and they’re only going to get more common in the next few years. To put it simply, imagine a bunch of small digital assistants—agents—that analyze what’s going on, make decisions, and get things done. This makes me wonder: how are we going to handle all these agents in the future? How do we trust them to make decisions for us and let them operate on their own?&lt;/p&gt;

&lt;p&gt;Right now, there are tons of frameworks that let you quickly build AI agents. Honestly, it feels like every other day a new “low-code” tool pops up, claiming to make building agents super easy. These tools are everywhere—simple drag-and-drop boards or text boxes where you just connect a few prompts and data, and boom, you have your agent.&lt;/p&gt;

&lt;p&gt;At the heart of every AI agent, there are three key parts: the Model, the Tools, and the Reasoning Loop.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The Model: This is the Large Language Model (LLM) that powers the agent. It’s the core of the agent’s intelligence, trained on tons of text data to understand language and follow complex instructions. This model gives the agent its ability to think and respond like a human.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Tools: These are the specific functions that the AI agent uses to interact with its environment and carry out tasks. Whether it’s fetching data, calling APIs, or interacting with other software, tools are what make the agent capable of performing its job.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Reasoning Loop: This is how the agent makes decisions. It’s a process that allows the agent to solve problems, figure out the best course of action, and get things done.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this post, I’m going to show you something a bit different. Instead of using a framework, I’ll walk you through building a fintech agent with Python. This agent will help with decision-making when it comes to loans and insurance.&lt;/p&gt;

&lt;h3 id=&quot;whats-the-deal&quot;&gt;What’s the deal?&lt;/h3&gt;

&lt;p&gt;So how this fintech agent works, Well, imagine you’re a FinTech company, now customers hit you up with questions like, “Can I borrow $10K for a new kitchen? I am 26 years old” or “I crashed my car—will you cover it?” Lol, I would literally close that insurance claim for sure.&lt;/p&gt;

&lt;p&gt;Ok the point is What we need is a system that’s fast, smart, and trustworthy in making the decisions on the loan queries as well the insurance claims. Now what I did is, instead of a single alone Agent with all the tools, we will have three agents, loan, insurance and the kernel ones.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Loan Agent: Takes a query, figures out intent (e.g., “home improvement”), and predicts if they’re loan-worthy based on age, income, and amount with the help of a ML model.&lt;/li&gt;
  &lt;li&gt;Insurance Side: Reads a claim, compares it to past ones, and decides if it’s payable—think semantic search over a claims database.&lt;/li&gt;
  &lt;li&gt;Kernel: The brains tying it together, routing queries to the right agent.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Why raw Python? It’s flexible; I mean I am just presenting a POC and the companies can literally customize it to their data and needs, no black-box framework nonsense. The &lt;a href=&quot;https://www.kaggle.com/datasets/laotse/credit-risk-dataset&quot;&gt;Credit Risk Dataset&lt;/a&gt; and synthetic claims are just stand-ins; real firms would use their own loan histories and claim records.&lt;/p&gt;

&lt;p&gt;Here’s the big picture: we’ve got a Kernel Agent directing traffic, a Loan Agent predicting eligibility with ML, and an Insurance Agent checking claims against a vector database.&lt;/p&gt;

&lt;p&gt;I am using the Credit Risk Dataset as a demo for loans, in real;companies can use the CIBIL score like metric to check if the given person is eligible for the loans or not. But for the sake of this POC, I have utilized the dataset, trained a random forest and use it for the predictive analysis.&lt;/p&gt;

&lt;p&gt;For the insurance-agent, I have used a synthetic pipeline to generate a dataset which consists of the fake insurance queries, and the target is based on that conversation, if the insurance claim is done, the target is one, insurance—placeholders to show the ropes. Companies can plug in their own data instead.&lt;/p&gt;

&lt;p&gt;Well I would say you can tune the dataset you want as you require the data. Let’s break it down step by step, with code and the why behind it all.&lt;/p&gt;

&lt;h3 id=&quot;setting-the-stage-libraries-and-setup&quot;&gt;Setting the Stage: Libraries and Setup&lt;/h3&gt;

&lt;p&gt;We start by grabbing our tools—libraries that handle data, models, and vectors:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import pandas as pd
import joblib
import pyarrow as pa
from sentence_transformers import SentenceTransformer
import lancedb
from mistralai import Mistral
import os
from abc import ABC, abstractmethod
from typing import Any

# Abstract Tool Class
class Tool(ABC):
    @abstractmethod
    def name(self) -&amp;gt; str:
        pass

    @abstractmethod
    def description(self) -&amp;gt; str:
        pass

    @abstractmethod
    def use(self, *args, **kwargs) -&amp;gt; Any:
        pass

# Initialize Mistral and Embedder
api_key = os.environ.get(&quot;MISTRAL_API_KEY&quot;, &quot;xxxxxxxxxxxxx&quot;)  
if not api_key:
    raise ValueError(&quot;Please set the MISTRAL_API_KEY environment variable.&quot;)

model = &quot;mistral-large-latest&quot;
client = Mistral(api_key=api_key)
embedder = SentenceTransformer(&apos;all-MiniLM-L6-v2&apos;)

# Connect to LanceDB
db = lancedb.connect(&apos;./lancedb_data&apos;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the quick demonstration, I am going to use &lt;code&gt;mistral-large-latest&lt;/code&gt; model from the Mistral for LLM tasks and the intent classification in the Loan queries. The &lt;code&gt;Tool&lt;/code&gt; class is our way to keep the agents modular - every tool gets a clear job.&lt;/p&gt;

&lt;h2 id=&quot;loan-agent-predicting-with-ml&quot;&gt;Loan Agent: Predicting with ML&lt;/h2&gt;

&lt;p&gt;The Loan Agent decides who gets a loan. We’re using the Credit Risk Dataset as a demo—it’s got age, income, loan amounts, and intents, perfect for a proof-of-concept.&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Creating a Restaurant Recommendation System</title>
   <link href="http://localhost:4000/2024/12/28/creating-a-restaurant-bot"/>
   <updated>2024-12-28T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/12/28/creating-a-restaurant-bot</id>
   <content type="html">&lt;p&gt;In 2024, I did spend significant amount of time playing with RAG and Vector Databases. Typically, LanceDB was at the core and it was one amazing hell of a ride. As the year is ending, I tried to make a simple restaurant recommendation system but it’s going to be slightly different. The idea is to use this &lt;a href=&quot;https://www.kaggle.com/datasets/abhijitdahatonde/swiggy-restuarant-dataset&quot;&gt;Restaurant Dataset&lt;/a&gt; and to answer the queries like “Is there any cafe nearby which serves Punjabi food?” or “What are the top 5 restaurants in the city which serve Chinese food?”. The twist is, we need some form of geospatial data to mould the data points into a form that can be used for queries which are related to the distance.&lt;/p&gt;

&lt;p&gt;So if you want to name this stuff, it can be called “Geospatial Recommendation System”. Sounds cool.. Ok let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;how-to-start&quot;&gt;How to start?&lt;/h3&gt;

&lt;p&gt;Well, ok so the first thing is to sort out some relevant features that are required for the recommendation system. So generally, folks who are searching for any recommendation for a restaurant, they are generally looking out for things like restaurant’s name (obviously lol), location maybe, and what kind of food they serve, or other details like ratings or maybe how much time it takes for a restaurant to deliver the food or what’s the average order prices. So, we need to extract these features from the dataset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import pandas as pd

restaurant_data = pd.read_csv(&quot;data.csv&quot;)
restaurant_data = restaurant_data[restaurant_data.columns[1:]]
restaurant_data.dropna(inplace=True)
restaurant_data.drop_duplicates(inplace=True)
restaurant_data.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;../images/creating-a-restaurant-bot/data-reference.png&quot; alt=&quot;image-showing-the-table-and-the-data&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To keep things simple, we’re just going to focus on a few key details for now: the type of food a restaurant serves, how customers rate it on average, and where it’s located. By sticking to these basics, we can quickly give people great recommendations without making things too complicated.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data_points_vectors = []

for _, row in restaurant_data.iterrows():
    filter_cols = [&apos;Food type&apos;, &apos;Avg ratings&apos;, &apos;Address&apos;]
    data_point = &quot;#&quot;.join(f&quot;{col}/{row[col]}&quot; for col in filter_cols)
    data_points_vectors.append(data_point)

# Add the new column to the DataFrame
restaurant_data[&quot;query_string&quot;] = data_points_vectors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that I’ve used &lt;code&gt;#&lt;/code&gt; to separate different sections and &lt;code&gt;/&lt;/code&gt; for splitting up the key-value pairs. Just a heads up, you can pick different separators and delimiters if you like, but since I’m using FTS (full text search) from LanceDB, a few are reserved for internal representations. If you need to, you can use a backslash as a prefix to support the reserved ones and still use them. This is how a single query string might look&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&apos;Food type/Biryani,Chinese,North Indian,South Indian#Avg ratings/4.4#Address/5Th Block&apos;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, this looks good! Next, we need to turn our query string into a vector. You can choose any embedding model that fits your needs, but I’ll be using the paraphrase-MiniLM-L6-v2 model for now. Basically, all we have to do is encode our query strings into vectors and then load up the payload with the relevant information.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from sentence_transformers import SentenceTransformer
model = SentenceTransformer(&apos;paraphrase-MiniLM-L6-v2&apos;)

list_of_payloads = []

for index, row in restaurant_data.iterrows():
    encoded_vector = model.encode(row[&apos;query_string&apos;])
    payload = {
        &apos;Area&apos;: row[&apos;Area&apos;],
        &apos;City&apos;: row[&apos;City&apos;],
        &apos;Restaurant&apos;: row[&apos;Restaurant&apos;],
        &apos;Price&apos;: row[&apos;Price&apos;],
        &apos;Avg_ratings&apos;: row[&apos;Avg ratings&apos;],
        &apos;Total_ratings&apos;: row[&apos;Total ratings&apos;],
        &apos;Food_type&apos;: row[&apos;Food type&apos;],
        &apos;Address&apos;: row[&apos;Address&apos;],
        &apos;Delivery_time&apos;: row[&apos;Delivery time&apos;],
        &apos;query_string&apos;: row[&apos;query_string&apos;],
        &apos;vector&apos;: encoded_vector
    }

    list_of_payloads.append(payload)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;setting-up-the-vector-database&quot;&gt;Setting up the Vector Database&lt;/h3&gt;

&lt;p&gt;So, we’ve got our &lt;code&gt;list_of_payloads&lt;/code&gt; that includes all the relevant data we’re going to store in our vector database. Let’s get LanceDB set up here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import lancedb

# Connect to the LanceDB instance
uri = &quot;data&quot;
db = lancedb.connect(uri)

lancedb_table = db.create_table(&quot;restaurant-geocoding-app&quot;, data=list_of_payloads)
lancedb_df = lancedb_table.to_pandas()
lancedb_df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;../images/creating-a-restaurant-bot/lancedb-table-reference.png&quot; alt=&quot;image-showing-the-lancedb-table-with-the-data&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setting-up-the-geospatial-reference&quot;&gt;Setting up the Geospatial Reference&lt;/h3&gt;

&lt;p&gt;Now that our vector database is ready, the next step is to convert user queries into our specific query format. Essentially, what we will do here is to carefully extract key details from each user query to form a structured dictionary. This structured data will then be reformatted to match the pattern of our query strings. To achieve this, I’ll just use a LLM to decipher the user queries and identify the crucial entities we need.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import os
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

api_key = os.getenv(&quot;OPENAI_API_KEY&quot;)

# Initialize the OpenAI client
client = OpenAI(api_key=api_key)

query_string = &quot;Hi, I am looking for a casual dining restaurant where Indian or Italian food is served near the HSR Bangalore&quot;

# Helper prompt to extract structured data from ip_prompt
total_prompt = f&quot;&quot;&quot;Query String: {query_string}\n\n\
Now from the query string above extract these following entities pinpoints:
1. Food type : Extract the food type 
2. Avg ratings : Extract the average ratings
3. Address : Extract the current exact location, don&apos;t consider the fillers like &quot;near&quot; or &quot;nearby&quot;.

NOTE : For the Current location, try to understand the pin point location in the query string. Do not give any extra information. If you make the mistakes, bad things
will happen.

Finally return a python dictionary using those points as keys and don&apos;t write the markdown of python. If value of a key is not mentioned, then set it as None.
&quot;&quot;&quot;

# Make a request to OpenAI&apos;s API
completion = client.chat.completions.create(
    model=&quot;gpt-4o&quot;,  # Use the appropriate model
    store=True,
    messages=[
        {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: total_prompt}
    ]
)

# Extract the generated text
content = completion.choices[0].message.content
print(content)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;{
  &quot;Food type&quot;: &quot;Indian or Italian&quot;,
  &quot;Avg ratings&quot;: None,
  &quot;Address&quot;: &quot;HSR Bangalore&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, all we need to do is process this output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import ast

# Convert the string content to a dictionary
try:
    response_dict = ast.literal_eval(content)
except (ValueError, SyntaxError) as e:
    print(&quot;Error parsing the response:&quot;, e)
    response_dict = {}


filter_cols = [&apos;Food type&apos;, &apos;Avg ratings&apos;, &apos;Address&apos;]
query_string_parts = [f&quot;{col}/{response_dict.get(col)}&quot; for col in filter_cols if response_dict.get(col)]

query_string = &quot;#&quot;.join(query_string_parts)
print((query_string))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, now the user query looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Food type/Indian or Italian#Address/HSR Bangalore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, this user query is now formatted exactly like our &lt;code&gt;query_strings&lt;/code&gt;. We can go ahead and search through the vector database to find the top restaurants that best match this query.&lt;/p&gt;

&lt;h3 id=&quot;searching-like-a-pro&quot;&gt;Searching like a pro.&lt;/h3&gt;

&lt;p&gt;I’ll be using the Full Text Search (FTS) feature from LanceDB to run the search. You can read more about what’s happening behind the scenes &lt;a href=&quot;https://lancedb.github.io/lancedb/fts/#example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Create the FTS index and search
lancedb_table.create_fts_index(&quot;query_string&quot;, replace=True)
results = lancedb_table.search(query_string).to_pandas()
results.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;../images/creating-a-restaurant-bot/search-results.png&quot; alt=&quot;image-showing-the-results&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;using-the-geospatial-data&quot;&gt;Using the Geospatial data&lt;/h3&gt;

&lt;p&gt;So basically when someone searches for nearby restaurants, maybe they’re craving a specific type of cuisine or looking for highly-rated places, we first search up the places that fills there requirements. Now after identifying potential options, we use the &lt;a href=&quot;https://developers.google.com/maps/documentation/geocoding/overview&quot;&gt;Geospatial API&lt;/a&gt; to pinpoint their exact locations. The Google Maps API is perfect for this—it grabs the latitude and longitude so we know precisely where each restaurant is. With these coordinates, we can then easily figure out which places are closest to the user’s location, by just calculating the distance.&lt;/p&gt;

&lt;p&gt;If you didn’t get that, Bear with me, this is going to be super cool.. So first thing we need to do is to setup our Geospatial function which takes a place and return the coordinates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import requests
import math

def get_google_geocoding(address, api_key):
    base_url = &quot;https://maps.googleapis.com/maps/api/geocode/json&quot;
    params = {&quot;address&quot;: address, &quot;key&quot;: api_key}
    response = requests.get(base_url, params=params)
    
    if response.status_code == 200:
        result = response.json()
        if result[&quot;status&quot;] == &quot;OK&quot;:
            latitude = result[&quot;results&quot;][0][&quot;geometry&quot;][&quot;location&quot;][&quot;lat&quot;]
            longitude = result[&quot;results&quot;][0][&quot;geometry&quot;][&quot;location&quot;][&quot;lng&quot;]
            return (latitude, longitude)
        else:
            print(f&quot;Google API: No results found for address: {address}&quot;)
            return None
    else:
        print(f&quot;Google API: Request failed for address: {address}&quot;)
        return None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the distance calculation, there’s this thing called the &lt;code&gt;Haversine formula&lt;/code&gt;. It uses the coordinates of two points and basically draws an imaginary straight line between them across the earth to measure how far they are from each other. There’s a bit of math involved in how this formula works, but we can skip that part for now. Here’s what the formula looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def haversine(coord1, coord2):
    R = 6371.0  # Radius of the Earth in kilometers
    lat1, lon1 = map(math.radians, coord1)
    lat2, lon2 = map(math.radians, coord2)
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    distance = R * c
    return distance
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, everything seems solid now, the only thing left is the current location. Here’s what we can do: if a user asks about restaurants near a specific area like “nearby HSR layout,” we can easily pull the current location from the preprocessing we did earlier. If not, for now, we can just input the current location manually. Then, we’ll check which restaurants from our vector database match our query and see how far they are based on the current location.&lt;/p&gt;

&lt;p&gt;Well let’s see what we get:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def process_top_restaurants(data, current_location, api_key, top_n=5):
    current_coords = get_google_geocoding(current_location, api_key)
    if not current_coords:
        return

    for index, row in data.head(top_n).iterrows():
        complete_address = f&quot;{row[&apos;Restaurant&apos;]}, {row[&apos;City&apos;]}&quot;
        restaurant_coords = get_google_geocoding(complete_address, api_key)
        if restaurant_coords:
            distance = haversine(current_coords, restaurant_coords)
            print(f&quot;Restaurant Name: {row[&apos;Restaurant&apos;]}&quot;)
            print(f&quot;Distance: {distance:.2f} km&quot;)
            print(f&quot;Area: {row[&apos;Area&apos;]}&quot;)
            print(f&quot;Price: {row[&apos;Price&apos;]}&quot;)
            print(f&quot;Coordinates: {restaurant_coords}&quot;)
            print(f&quot;Cuisines Type: {row[&apos;Food_type&apos;]}&quot;)
            print(&quot;-&quot; * 40)

# Example usage
api_key = os.getenv(&apos;GOOGLE_MAPS_API&apos;)
current_location = &apos;HSR Layout, Bangalore&apos;
process_top_restaurants(results, current_location, api_key, top_n=5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Restaurant Name: Brooks And Bonds Brewery
Distance: 3.36 km
Area: Koramangala
Price: 200.0
Coordinates: (12.9341801, 77.62334249999999)
Cuisines Type: Indian
----------------------------------------
Restaurant Name: Cafe Azzure
Distance: 8.06 km
Area: Ashok Nagar
Price: 1000.0
Coordinates: (12.975012, 77.6076558)
Cuisines Type: American,Italian
----------------------------------------
Restaurant Name: Tottos Pizza
Distance: 7.92 km
Area: Central Bangalore
Price: 500.0
Coordinates: (12.9731935, 77.607012)
Cuisines Type: Continental,Italian
----------------------------------------
Restaurant Name: Holy Doh!
Distance: 4.15 km
Area: Central Bangalore
Price: 600.0
Coordinates: (12.9346188, 77.6139914)
Cuisines Type: Pizzas,Italian
----------------------------------------
Restaurant Name: Bakery By Foodhall
Distance: 7.31 km
Area: Ulsoor
Price: 300.0
Coordinates: (12.9734944, 77.62038629999999)
Cuisines Type: Bakery,Italian,Desserts
----------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we go.. This is cool :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Understanding RAG fusion</title>
   <link href="http://localhost:4000/2024/12/25/rag-fusion-understanding"/>
   <updated>2024-12-25T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/12/25/rag-fusion-understanding</id>
   <content type="html">&lt;p&gt;If you don’t have any clue on what RAG is, please go through this &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/02/14/rag-application-with-langchain&quot;&gt;one&lt;/a&gt; to get a brief on what this is all about.&lt;/p&gt;

&lt;p&gt;So when the RAG model ends, RAG Fusion picks up by adding more layers that improve the RAG retrieval phase, particularly by adding more sophisticated mechanisms for interpretation and integration of the retrieval output. RAG Fusion tries to combat some of the weaknesses inherent also to RAG, including better response to ambiguous queries and returning more relevant, accurate information by improving the retrieval-to-generation loop.&lt;/p&gt;

&lt;h2 id=&quot;what-was-missed-in-rag&quot;&gt;What was missed in RAG?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Constraints with Current Search Technologies: RAG is limited by the same things limiting our retrieval-based lexical and vector search technologies.&lt;/li&gt;
  &lt;li&gt;Human Search Inefficiencies: Humans are not great at writing what they want into search systems, such as typos, vague queries, or limited vocabulary, which often lead to missing the vast reservoir of information that lies beyond the obvious top search results. While RAG assists, it hasn’t entirely solved this problem.&lt;/li&gt;
  &lt;li&gt;Over-Simplification of Search: Our prevalent search paradigm linearly maps queries to answers, lacking the depth to understand the multi-dimensional nature of human queries. This linear model often fails to capture the nuances and contexts of more complex user inquiries, resulting in less relevant results.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-the-improvement-really-happens&quot;&gt;How the improvement really happens?&lt;/h2&gt;

&lt;p&gt;So basically when we talk about the traditional RAG, it works by ranking documents in the order of relevance to the query based on vector similarity distances, usually using cosine similarity.&lt;/p&gt;

&lt;p&gt;RAG Fusion on the other hands addresses the challenges of document retrieval using&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Query Transformation: Generates multiple new queries from different angels based on the original query and&lt;/li&gt;
  &lt;li&gt;Reciprocal Rank Fusion(RRF): Reranking the document relevance based on Reciprocal Rank Fusion(RRF)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That being said, when RAG Fusion receives the original query, it sends the original query to the large language model(LLM) to generate a number of new search queries based on the original query from different perspectives.&lt;/p&gt;

&lt;p&gt;So what really happens is&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Query Duplication with a Twist: Translate a user’s query into similar, yet distinct queries via an LLM.&lt;/li&gt;
  &lt;li&gt;Vector Search Unleashed: Perform vector searches for the original and its newly generated query siblings.&lt;/li&gt;
  &lt;li&gt;Intelligent Reranking: Aggregate and refine all the results using reciprocal rank fusion.&lt;/li&gt;
  &lt;li&gt;Final Step:  Pair the cherry-picked results with the new queries, guiding the large language model to a crafted output that considers all the queries and the reranked list of results.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now For all the documents retrieved from the vector database for each query, like a list of lists.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Determine the rank of each document within its respective ranked list.&lt;/li&gt;
  &lt;li&gt;For each document, compute the reciprocal of its rank (e.g., rank 1 → 1/1 = 1; rank 3 → 1/3).&lt;/li&gt;
  &lt;li&gt;Sum the reciprocal ranks of each retrieved document across all generated queries.&lt;/li&gt;
  &lt;li&gt;Order the documents based on their total aggregated scores to determine their final ranking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then now the top-ranked retrieved documents will be then sent to the LLM along with all the queries to generate a response.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Python Package to convert image datasets to lance type</title>
   <link href="http://localhost:4000/2024/12/04/lance-converter-package"/>
   <updated>2024-12-04T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/12/04/lance-converter-package</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/cli-for-lance-converter/lancify-title-image.png?raw=true&quot; alt=&quot;cli-lancify-title-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A few months ago, I wrote two articles on how the Lance format can supercharge your machine learning workflows. In the &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/03/29/effortlessly-loading-and-processing-images-with-lance-a-code-walkthrough&quot;&gt;first&lt;/a&gt;, I showed how Lance’s columnar storage can make handling large image datasets much more efficient for the ML workflows. Then, I followed up with a &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/04/09/convert-any-image-dataset-to-lance&quot;&gt;guide&lt;/a&gt; on converting datasets like &lt;a href=&quot;https://www.kaggle.com/datasets/vipulmaheshwarii/cinic-10-lance-dataset?ref=blog.lancedb.com&quot;&gt;cinic&lt;/a&gt; and &lt;a href=&quot;https://www.kaggle.com/datasets/vipulmaheshwarii/mini-imagenet-lance-dataset?ref=blog.lancedb.com&quot;&gt;mini-imagenet&lt;/a&gt; into Lance format using a custom Python script in &lt;a href=&quot;https://colab.research.google.com/drive/12RjdHmp6m9_Lx7YMRiat4_fYWZ2g63gx?usp=sharing&amp;amp;ref=blog.lancedb.com&quot;&gt;Google Colab&lt;/a&gt;. While that worked well, it was a bit manual.&lt;/p&gt;

&lt;p&gt;Well, Some of my friends are lazy as &lt;code&gt;fuxcks&lt;/code&gt; but excited enough to run the colab and use the Lance formatted datatype for some of their experiments. Being a good friend, I’m excited to share a much easier solution: the &lt;code&gt;lancify&lt;/code&gt; Python package.&lt;/p&gt;

&lt;p&gt;I mean it’s literally just running a one command, and boom — your image datasets are in lance format, ready to go. And, just between us, it makes my life a lot easier too.&lt;/p&gt;

&lt;h3 id=&quot;installing-the-package&quot;&gt;Installing the Package&lt;/h3&gt;

&lt;p&gt;Before diving into the conversion process, let’s start by installing the &lt;code&gt;lancify&lt;/code&gt; package. You can easily install it via pip:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pip install lancify
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;converting-your-image-dataset-to-lance&quot;&gt;Converting Your Image Dataset to Lance&lt;/h3&gt;

&lt;p&gt;Once you’ve installed the package, converting any image dataset to the Lance format is as simple as running the following Python code. The &lt;code&gt;lancify&lt;/code&gt; package abstracts away the complexity of running the colab notebooks manually;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from lancify.converter import convert_dataset

# Define the path to your image dataset
image_dataset_path = &apos;cards-classification&apos;
resize_dimensions = (256, 256)  # Example resize dimensions
splits = [&quot;train&quot;, &quot;test&quot;, &quot;valid&quot;]

convert_dataset(
    dataset_path=image_dataset_path,
    batch_size=10,  # You can adjust the batch size as needed
    resize=resize_dimensions,  # Pass resize dimensions if you want to resize images
    splits=splits
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this demonstration, I have used this &lt;a href=&quot;https://www.kaggle.com/datasets/gpiosenka/cards-image-datasetclassification&quot;&gt;dataset&lt;/a&gt;, which provides flexibility in terms of image resizing and dataset splits. The image resizing is optional; by default, the images are processed with their original dimensions. However, if needed, you can specify a target size, such as 256x256, by passing the desired dimensions. If you prefer to keep the original size, simply pass None for the resize parameter. Regarding dataset splits, if the dataset includes predefined divisions like training, testing, and validation sets, you can pass a list specifying the relevant splits.&lt;/p&gt;

&lt;p&gt;For &lt;a href=&quot;https://www.kaggle.com/datasets/jehanbhathena/weather-dataset&quot;&gt;datasets&lt;/a&gt; that do not have predefined splits, the images are organized by classification labels. In such cases, you only need to provide the dataset path, and a single lance file will be generated, containing all the images with their corresponding labels. This makes sure that the various kinds of image datasets are handled properly whether they include splits or not.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from lancify.converter import convert_dataset

image_dataset_path = &apos;weather-classification-data&apos;

convert_dataset(
    dataset_path=image_dataset_path,
    batch_size=10,  # You can adjust the batch size as needed
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;convert_dataset&lt;/code&gt; function automatically handles the following:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Reading the image data&lt;/strong&gt; – It reads image files and their metadata (filename, category, data split).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Converting to Lance&lt;/strong&gt; – The images are converted into the Lance format with proper schema.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Saving the Lance files&lt;/strong&gt; – Lance files are saved for each dataset split (train, test, validation) if there are splits in the dataset, if not then a single lance file is saved with the combined data with an adequate schema to segregate the data with the respective labels.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This method is far more concise than manually iterating over directories, creating schemas, and writing to lance files as we did in the previous version using raw colab.&lt;/p&gt;

&lt;h3 id=&quot;cli-sdk&quot;&gt;CLI SDK&lt;/h3&gt;

&lt;p&gt;In addition to using the &lt;code&gt;lancify&lt;/code&gt; package programmatically through the imported function, you can also leverage the CLI SDK to convert your image datasets. The SDK offers a CLI for the &lt;code&gt;lancify&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To use the CLI, all you need to do is install the package with &lt;code&gt;pip install lancify&lt;/code&gt; and then run the &lt;code&gt;lancify&lt;/code&gt; command in your terminal and follow the args.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/cli-for-lance-converter/cli-lancify.png?raw=true&quot; alt=&quot;image-cli&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;whats-happened-behind-the-scenes&quot;&gt;What’s Happened Behind the Scenes?&lt;/h3&gt;

&lt;p&gt;To give you a better understanding, here’s a brief overview of what happens when you use &lt;code&gt;lancify&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Image Data&lt;/strong&gt;: The package reads images from your dataset directory and converts them into a binary format.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Metadata Extraction&lt;/strong&gt;: Metadata such as the image’s filename, category (label), and data split (train/test/validation) are automatically extracted.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PyArrow RecordBatch&lt;/strong&gt;: The image data and metadata are packaged into a PyArrow &lt;code&gt;RecordBatch&lt;/code&gt; for efficient columnar storage.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lance Dataset Creation&lt;/strong&gt;: These &lt;code&gt;RecordBatch&lt;/code&gt; objects are then written to Lance datasets, which are optimized for performance and storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This process mirrors the manual steps we previously took but in a much more user-friendly manner, significantly reducing the boilerplate code that was necessary before when you have to manually handle the &lt;a href=&quot;https://colab.research.google.com/drive/12RjdHmp6m9_Lx7YMRiat4_fYWZ2g63gx?usp=sharing#scrollTo=93qlCg6TpcW-&quot;&gt;colab&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;loading-your-dataset-into-pandas&quot;&gt;Loading Your Dataset into Pandas&lt;/h3&gt;

&lt;p&gt;Once your image dataset has been converted into the lance format, you can seamlessly load it into pandas data frames for doing all kind of stuff. Here’s how to do it for the &lt;code&gt;card-classification&lt;/code&gt; training lance file..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import lance
import pandas as pd

# Load Lance dataset
ds = lance.dataset(&apos;cards-classification/cards-classification_train.lance&apos;)
table = ds.to_table()

# Convert Lance table to Pandas dataframe
df = table.to_pandas()
print(df.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/cli-for-lance-converter/lance-training.png?raw=true&quot; alt=&quot;lance-training&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a simple and efficient way to convert your image datasets to the lance format using the &lt;code&gt;lancify&lt;/code&gt; package, and it integrates smoothly into your deep learning projects.&lt;/p&gt;

&lt;p&gt;Switching to the Lance format makes your data pipelines faster and more efficient, especially when dealing with large image datasets. All you need to do is install the package and run the conversion script on your datasets—no hassle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/cli-for-lance-converter/child-meme-lancify.png?raw=true&quot; alt=&quot;meme-maker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just this small change can really speed up your machine learning workflows—data loading and processing become much quicker, which means your models train faster.  If you need a reference, this is a &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/06/26/train-a-cnn-with-lancedataset&quot;&gt;quickie&lt;/a&gt; on how to use the lance formatted image datasets for training you deep learning models. And if you’re looking for more ideas, there are plenty of other &lt;a href=&quot;https://github.com/lancedb/lance-deeplearning-recipes&quot;&gt;deep learning recipes&lt;/a&gt; built on lance.&lt;/p&gt;

&lt;p&gt;Trust me, it’s worth it! 🤗&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Improving RAG with RAPTOR</title>
   <link href="http://localhost:4000/2024/10/30/improving-rag-with-raptor"/>
   <updated>2024-10-30T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/10/30/improving-rag-with-raptor</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/improving-raptor-with-rag/raptor-title.png?raw=true&quot; alt=&quot;title-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Traditional &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/02/14/rag-application-with-langchain&quot;&gt;RAG&lt;/a&gt; setups often split documents into fixed-size chunks, but this can lead to problems in maintaining the semantic coherence of the text. If a key concept spans multiple chunks, and we only retrieve one chunk, the LLM might lack the full understanding of the idea, leading to incomplete or misleading responses. As a result, crucial ideas and relationships between concepts may be overlooked, leading to incomplete or inaccurate responses.&lt;/p&gt;

&lt;p&gt;Additionally, In a flat retrieval structure where all the retrieved chunks are treated equally, this can dilute the importance of critical sections. For example, if one section of the document has key insights but gets buried among less relevant chunks, the model won’t know which parts to prioritize unless we introduce more intelligent weighting or hierarchical structures. I mean it becomes really difficult during the retrieval to weigh which chunk is more important and might be better suitable as a context.&lt;/p&gt;

&lt;h3 id=&quot;what-is-raptor&quot;&gt;What is RAPTOR?&lt;/h3&gt;

&lt;p&gt;RAPTOR, which stands for Recursive Abstractive Processing for Tree Organized Retrieval, is a new technique which solves the problems mentioned before. Think of RAPTOR as a librarian who organizes information in a tree-like structure. Instead of simply stacking books in a pile, it clusters similar titles together, creating a hierarchy that narrows as you ascend. Each cluster of books represents a group of related documents, and at the top of each cluster, there’s a summary that encapsulates the key points from all the books below it. This process continues all the way to the top of the tree, providing a comprehensive view of the information—it’s like having both a magnifying glass and a telescope!&lt;/p&gt;

&lt;p&gt;To visualize this further, think of the leaves of the tree as document chunks. These chunks are grouped into clusters to generate meaningful summaries, which then become the new leaves of the tree. This recursive process repeats until reaching the top.&lt;/p&gt;

&lt;h3 id=&quot;key-terms-to-look-out-for&quot;&gt;Key terms to look out for&lt;/h3&gt;

&lt;p&gt;Before we dive in, let’s quickly review some key terms that will be useful as we explore &lt;strong&gt;RAPTOR&lt;/strong&gt; tech. I just want to put it up here to make sure you are comfortable with the nitty tech details as we go along.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;GMM Clustering&lt;/strong&gt;: Gaussian Mixture Models (GMM) group data into clusters based on statistical probabilities. So instead of rigidly classifying each instance into one category like K-means, GMM generates K-Gaussian distributions that consider the entire training space. This means that each point can belong to one or more distributions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dimensionality Reduction&lt;/strong&gt;: This process simplifies the data by reducing the number of variables while retaining essential features. It’s particularly important for understanding high-dimensional datasets like embeddings.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UMAP&lt;/strong&gt;: Uniform Manifold Approximation and Projection (UMAP) is a powerful dimensionality reduction algorithm we’ll use to shrink the size of our data point embeddings. This reduction makes it easier for clustering algorithms like GMM to cluster high-dimensional embeddings.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BIC and Elbow Method&lt;/strong&gt;: Both techniques help identify the optimal number of clusters in a dataset. The Bayesian Information Criterion (BIC) evaluates models based on their fit to the data while penalizing complexity. The Elbow Method plots explained variance against the number of clusters, helping to pinpoint where adding more clusters offers diminishing returns. For our purposes, we’ll leverage both methods to determine the best number of clusters.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;how-it-actually-works&quot;&gt;How it actually works?&lt;/h3&gt;

&lt;p&gt;Now that you’re familiar with the key terms (and if not, no worries—you’ll catch on as we go!), let’s dive into how everything actually works under the hood of RAPTOR.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Starting Documents as Leaves&lt;/strong&gt;: The leaves of the tree represent a set of initial documents, which are our text chunks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Embedding and Clustering&lt;/strong&gt;: The leaves are embedded and clustered. The authors utilize the UMAP dimensionality reduction algorithm to minimize the embedding size of these chunks. For clustering, Gaussian Mixture Models (GMM) are employed to ensure effective grouping, addressing the challenges posed by high-dimensional vector embeddings.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Summarizing Clusters&lt;/strong&gt;: Once clustered, these groups of similar chunks are summarized into higher-level abstractions nodes. Each cluster acts like a basket for similar documents, and the individual summaries encapsulate the essence of all nodes within that cluster. This process builds from the bottom up, where nodes are clustered together to create summaries that are then passed up the hierarchy.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Recursive Process&lt;/strong&gt;: This entire procedure is recursive, resulting in a tree structure that transitions from raw documents (the leaves) to more abstract summaries, with each summary derived from the clusters of various nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/improving-raptor-with-rag/raptor-workflow.png?raw=true&quot; alt=&quot;RAPTOR-workflow&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;building-the-raptor&quot;&gt;Building the RAPTOR&lt;/h3&gt;

&lt;p&gt;Now that we’ve unpacked how it all works (and you’re still with me hopefully, right?), let’s shift gears and talk about how we actually build the RAPTOR tree.&lt;/p&gt;

&lt;h3 id=&quot;setup-and-imports&quot;&gt;Setup and Imports&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;pip install lancedb scikit-learn openai torch sentence_transformers tiktoken umap-learn PyPDF2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import os
import uuid
import tiktoken
import re
import numpy as np
import pandas as pd
import transformers
import torch
import umap.umap_ as umap
import matplotlib.pyplot as plt
from openai import OpenAI
from typing import List, Tuple, Optional, Dict
from sklearn.mixture import GaussianMixture
from sentence_transformers import SentenceTransformer

openai_api_key = &quot;sk-XXXXXXXXXXXXXXX&quot;
client = OpenAI(api_key=openai_api_key)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;creating-the-chunks&quot;&gt;Creating the Chunks&lt;/h3&gt;

&lt;p&gt;Setting up RAPTOR is pretty straightforward and builds on what we’ve already covered. The first step is to break down our textual documents into smaller chunks. Once we have those, we can convert them into dense vector embeddings. To simplify things, our use case example will use just &lt;a href=&quot;https://www.nttdata.com/global/en/-/media/nttdataglobal/1_files/investors/financial-results/2021/fy2021_fs_3q.pdf&quot;&gt;one financial document&lt;/a&gt; as a source. Download it and add to a directory. For now, I used a &lt;code&gt;data&lt;/code&gt; directory where all the documents can be added. You can of course load any source documents (and alter the query below) in your own experiments!&lt;/p&gt;

&lt;p&gt;Note: Make sure you use an unencrypted version of this file to avoid errors when PyPDF2 tries to read the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import os
import PyPDF2

# Function to extract text from a PDF file
def extract_pdf_text(file_path):
    with open(file_path, &apos;rb&apos;) as file:
        reader = PyPDF2.PdfReader(file)
        text = &quot;&quot;
        for page_num in range(len(reader.pages)):
            page = reader.pages[page_num]
            text += page.extract_text()
    return text

# Function to split text into chunks with overlap
def split_text(text, chunk_size=1000, chunk_overlap=50):
    chunks = []
    start = 0
    while start &amp;lt; len(text):
        end = min(start + chunk_size, len(text))
        chunks.append(text[start:end])
        start += chunk_size - chunk_overlap
    return chunks

# Function to process all PDFs in a directory
def process_directory(directory_path, chunk_size=1000, chunk_overlap=50):
    all_chunks = []
    # Iterate over all PDF files in the directory
    for filename in os.listdir(directory_path):
        if filename.endswith(&quot;.pdf&quot;):
            file_path = os.path.join(directory_path, filename)
            print(f&quot;Processing file: {file_path}&quot;)
            
            # Step 1: Extract text from the PDF
            pdf_text = extract_pdf_text(file_path)
            
            # Step 2: Split the extracted text into chunks
            chunks = split_text(pdf_text, chunk_size=chunk_size, chunk_overlap=chunk_overlap)
            
            # Append chunks from this file to the overall list
            all_chunks.extend(chunks)
    
    return all_chunks

directory_path = os.path.join(os.getcwd(), &quot;data&quot;)  # Specify your directory path
chunk_size = 1000
chunk_overlap = 50

# Process all PDF files in the directory and get the chunks
chunks = process_directory(directory_path, chunk_size=chunk_size, chunk_overlap=chunk_overlap)

# Optional: Print the number of chunks and preview some of the chunks
print(f&quot;Total number of chunks: {len(chunks)}&quot;)
for i, chunk in enumerate(chunks[:5]):  # Show first 5 chunks as a preview
    print(f&quot;Chunk {i+1}:\n{chunk}\n&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our chunks, it’s time to dive into the recursive processing to create summarized nodes. For the embedding part, I’ll be using the all-MiniLM-L6-v2 model from Sentence Transformers, but feel free to choose any embedding model that suits your needs—it’s entirely up to you!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;embedding_model = SentenceTransformer(&apos;sentence-transformers/all-MiniLM-L6-v2&apos;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;clustering-and-dimensionality-reduction&quot;&gt;Clustering and Dimensionality Reduction&lt;/h3&gt;

&lt;p&gt;Now we have our embedded chunks, it’s time to step on for the next set of tasks. When diving into RAPTOR, one of the biggest hurdles we encounter is the high dimensionality of vector embeddings. Traditional clustering methods like Gaussian Mixture Models (GMM) often struggle with this complexity, making it tough to effectively cluster high-dimensional data chunks. To tackle this challenge, we turn to &lt;strong&gt;Uniform Manifold Approximation and Projection (UMAP)&lt;/strong&gt;. UMAP excels at simplifying data while preserving the essential structures that matter most.&lt;/p&gt;

&lt;p&gt;A key factor in UMAP’s effectiveness is the &lt;strong&gt;&lt;code&gt;n_neighbors&lt;/code&gt;&lt;/strong&gt; parameter. This setting dictates how much of the data’s neighborhood UMAP considers during dimensionality reduction. In simpler terms, it helps you choose between zooming in on details or taking a broader view:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Higher &lt;code&gt;n_neighbors&lt;/code&gt;:&lt;/strong&gt; A higher value encourages UMAP to “look at many neighbors,” which helps maintain the &lt;strong&gt;global structure&lt;/strong&gt; of the data. This results in larger, more general clusters.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lower &lt;code&gt;n_neighbors&lt;/code&gt;:&lt;/strong&gt; Conversely, lowering &lt;code&gt;n_neighbors&lt;/code&gt; prompts UMAP to “focus on close relationships,” enabling it to preserve the &lt;strong&gt;local structure&lt;/strong&gt; and form smaller, more detailed clusters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Think of it this way:&lt;/strong&gt; Imagine you’re at a party. If you take a step back and look around (high &lt;code&gt;n_neighbors&lt;/code&gt;), you can see the whole room—where the groups are forming, who’s mingling, and the general vibe. But if you lean in closer to a specific group (low &lt;code&gt;n_neighbors&lt;/code&gt;), you can hear their conversation and pick up on the nuances, like inside jokes or shared interests. Both perspectives are valuable; it just depends on what you want to understand.&lt;/p&gt;

&lt;p&gt;In RAPTOR, we leverage this flexibility in &lt;code&gt;n_neighbors&lt;/code&gt; to create a &lt;strong&gt;hierarchical clustering structure&lt;/strong&gt;. We first run UMAP with a higher &lt;code&gt;n_neighbors&lt;/code&gt; to identify the &lt;strong&gt;global clusters&lt;/strong&gt;—the broad categories. Then, we narrow the focus by lowering the value to uncover &lt;strong&gt;local clusters&lt;/strong&gt; within those broader groups. This two-step approach ensures we capture both large-scale patterns and intricate details.&lt;/p&gt;

&lt;h3 id=&quot;well-tldr&quot;&gt;Well, TL;DR&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Dimensionality Reduction&lt;/strong&gt; helps manage high-dimensional data, and UMAP is our primary tool for that.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;&lt;code&gt;n_neighbors&lt;/code&gt;&lt;/strong&gt; parameter controls the balance between seeing the “big picture” and honing in on local details.&lt;/li&gt;
  &lt;li&gt;The clustering process begins with &lt;strong&gt;global clusters&lt;/strong&gt; (using high &lt;code&gt;n_neighbors&lt;/code&gt;), followed by a focus on &lt;strong&gt;local clusters&lt;/strong&gt; with a lower setting of &lt;code&gt;n_neighbors&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def dimensionality_reduction(
    embeddings: np.ndarray,
    target_dim: int,
    clustering_type: str,
    metric: str = &quot;cosine&quot;,
) -&amp;gt; np.ndarray:
    if clustering_type == &quot;local&quot;:
        n_neighbors = max(2, min(10, len(embeddings) - 1))
        min_dist = 0.01
    elif clustering_type == &quot;global&quot;:
        n_neighbors = max(2, min(int((len(embeddings) - 1) ** 0.5), len(embeddings) // 10, len(embeddings) - 1))
        min_dist = 0.1
    else:
        raise ValueError(&quot;clustering_type must be either &apos;local&apos; or &apos;global&apos;&quot;)

    umap_model = umap.UMAP(
        n_neighbors=n_neighbors,
        min_dist=min_dist,
        n_components=target_dim,
        metric=metric,
    )
    return umap_model.fit_transform(embeddings)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I plan to leverage both the Elbow Method and the Bayesian Information Criterion (BIC) to pinpoint the optimal number of clusters for our analysis.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def compute_inertia(embeddings: np.ndarray, labels: np.ndarray, centroids: np.ndarray) -&amp;gt; float:
    return np.sum(np.min(np.sum((embeddings[:, np.newaxis] - centroids) ** 2, axis=2), axis=1))

def optimal_cluster_number(
    embeddings: np.ndarray,
    max_clusters: int = 50,
    random_state: int = SEED
) -&amp;gt; int:
    max_clusters = min(max_clusters, len(embeddings))
    number_of_clusters = np.arange(1, max_clusters + 1)
    inertias = []
    bic_scores = []
    
    for n in number_of_clusters:
        gmm = GaussianMixture(n_components=n, random_state=random_state)
        labels = gmm.fit_predict(embeddings)
        centroids = gmm.means_
        inertia = compute_inertia(embeddings, labels, centroids)
        inertias.append(inertia)
        bic_scores.append(gmm.bic(embeddings))
    
    inertia_changes = np.diff(inertias)
    elbow_optimal = number_of_clusters[np.argmin(inertia_changes) + 1]
    bic_optimal = number_of_clusters[np.argmin(bic_scores)]
    
    return max(elbow_optimal, bic_optimal)

def gmm_clustering(
    embeddings: np.ndarray, 
    threshold: float, 
    random_state: int = SEED
) -&amp;gt; Tuple[List[np.ndarray], int]:
    n_clusters = optimal_cluster_number(embeddings, random_state=random_state)
    gm = GaussianMixture(n_components=n_clusters, random_state=random_state, n_init=2)
    gm.fit(embeddings)
    probs = gm.predict_proba(embeddings)
    labels = [np.where(prob &amp;gt; threshold)[0] for prob in probs] 
    return labels, n_clusters  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;tree-construction&quot;&gt;Tree Construction&lt;/h3&gt;

&lt;p&gt;Now that we’ve wrapped up the clustering part, let’s talk about how we build our hierarchical tree. After several rounds of clustering and summarization (while keeping track of how deep we go), here’s what we have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Leaf Nodes:&lt;/strong&gt; These are our original text chunks, forming the base of the tree.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Summary Nodes:&lt;/strong&gt; As we go up the tree, each node acts like a quick summary of its child nodes, capturing the main idea of the cluster.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hierarchical Embeddings:&lt;/strong&gt; The summary nodes can also become the new nodes at their level. Each of these nodes gets its own vector embedding, representing the summarized meaning. So, we’re essentially adding more nodes while enriching them with summaries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The process flows nicely: we embed the chunks, reduce their dimensions using UMAP, cluster them with Gaussian Mixture Models, start with a broad overview, and then zoom in for more detailed clusters before summarizing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def clustering_algorithm(
    embeddings: np.ndarray,
    target_dim: int,
    threshold: float,
    random_state: int = SEED
) -&amp;gt; Tuple[List[np.ndarray], int]:
    if len(embeddings) &amp;lt;= target_dim + 1:
        return [np.array([0]) for _ in range(len(embeddings))], 1
    
    # Global clustering
    reduced_global_embeddings = dimensionality_reduction(embeddings, target_dim, &quot;global&quot;)
    global_clusters, n_global_clusters = gmm_clustering(reduced_global_embeddings, threshold, random_state=random_state)

    all_local_clusters = [np.array([]) for _ in range(len(embeddings))]
    total_clusters = 0

    # Local clustering within each global cluster
    for i in range(n_global_clusters):
        global_cluster_mask = np.array([i in gc for gc in global_clusters])
        global_cluster_embeddings = embeddings[global_cluster_mask]

        if len(global_cluster_embeddings) &amp;lt;= target_dim + 1:
            # Assign all points in this global cluster to a single local cluster
            for idx in np.where(global_cluster_mask)[0]:
                all_local_clusters[idx] = np.append(all_local_clusters[idx], total_clusters)
            total_clusters += 1
            continue

        try:
            reduced_local_embeddings = dimensionality_reduction(global_cluster_embeddings, target_dim, &quot;local&quot;)
            local_clusters, n_local_clusters = gmm_clustering(reduced_local_embeddings, threshold, random_state=random_state)

            # Assign local cluster IDs
            for j in range(n_local_clusters):
                local_cluster_mask = np.array([j in lc for lc in local_clusters])
                global_indices = np.where(global_cluster_mask)[0]
                local_indices = global_indices[local_cluster_mask]
                for idx in local_indices:
                    all_local_clusters[idx] = np.append(all_local_clusters[idx], j + total_clusters)

            total_clusters += n_local_clusters
        except Exception as e:
            print(f&quot;Error in local clustering for global cluster {i}: {str(e)}&quot;)
            # Assign all points in this global cluster to a single local cluster
            for idx in np.where(global_cluster_mask)[0]:
                all_local_clusters[idx] = np.append(all_local_clusters[idx], total_clusters)
            total_clusters += 1

    return all_local_clusters, total_clusters
    
 def generate_summary(context: str) -&amp;gt; str:
    prompt = f&quot;&quot;&quot;
    Provide the Summary for the given context. Here are some additional instructions for you:

    Instructions:
    1. Don&apos;t make things up, Just use the contexts and generate the relevant summary.
    2. Don&apos;t mix the numbers, Just use the numbers in the context.
    3. Don&apos;t try to use fancy words, stick to the basics of the language that is being used in the context.

    Context: {context}
    &quot;&quot;&quot;
    response = client.chat.completions.create(
        model=&quot;gpt-4&quot;,
        messages=[
            {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are a helpful assistant that summarizes text.&quot;},
            {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: prompt}
        ],
        max_tokens=200,
        n=1,
        stop=None,
        temperature=0.7
    )
    summary = response.choices[0].message.content.strip()
    return summary

def embed_clusters(
    texts: List[str],
    target_dim: int = 10,
    threshold: float = 0.1
) -&amp;gt; pd.DataFrame:
    textual_embeddings = np.array(embedding_model.encode(texts))
    clusters, number_of_clusters = clustering_algorithm(textual_embeddings, target_dim, threshold)
    print(f&quot;Number of clusters: {number_of_clusters}&quot;)
    return pd.DataFrame({
        &quot;texts&quot;: texts,
        &quot;embedding&quot;: list(textual_embeddings),
        &quot;clusters&quot;: clusters
    })

def embed_cluster_summaries(
    texts: List[str],
    level: int,
    target_dim: int = 10,
    threshold: float = 0.1
) -&amp;gt; Tuple[pd.DataFrame, pd.DataFrame]:
    df_clusters = embed_clusters(texts, target_dim, threshold)
    main_list = []
    
    for _, row in df_clusters.iterrows():
        for cluster in row[&quot;clusters&quot;]:
            main_list.append({
                &quot;text&quot;: row[&quot;texts&quot;],
                &quot;embedding&quot;: row[&quot;embedding&quot;],
                &quot;clusters&quot;: cluster
            })
    
    main_df = pd.DataFrame(main_list)
    unique_clusters = main_df[&quot;clusters&quot;].unique()
    if len(unique_clusters) == 0:
        return df_clusters, pd.DataFrame(columns=[&quot;summaries&quot;, &quot;level&quot;, &quot;clusters&quot;])

    print(f&quot;--Generated {len(unique_clusters)} clusters--&quot;)

    summaries = []
    for cluster in unique_clusters:
        text_in_df = main_df[main_df[&quot;clusters&quot;] == cluster]
        unique_texts = text_in_df[&quot;text&quot;].tolist()
        text = &quot;------\n------&quot;.join(unique_texts)
        summary = generate_summary(text)
        summaries.append(summary)

    df_summaries = pd.DataFrame({
        &quot;summaries&quot;: summaries,
        &quot;level&quot;: [level] * len(summaries),
        &quot;clusters&quot;: unique_clusters
    })

    return df_clusters, df_summaries


def recursive_embedding_with_cluster_summarization(
    texts: List[str],
    number_of_levels: int = 3,
    level: int = 1,
    target_dim: int = 10,
    threshold: float = 0.1
) -&amp;gt; Dict[int, Tuple[pd.DataFrame, pd.DataFrame]]:
    if level &amp;gt; number_of_levels:
        return {}
    
    results = {}
    df_clusters, df_summaries = embed_cluster_summaries(texts, level, target_dim, threshold)
    results[level] = (df_clusters, df_summaries)
    
    if df_summaries.empty or len(df_summaries[&apos;clusters&apos;].unique()) == 1:
        print(f&quot;No more unique clusters found at level {level}. Stopping recursion.&quot;)
        return results
    
    if level &amp;lt; number_of_levels:
        next_level_texts = df_summaries[&apos;summaries&apos;].tolist()
        next_level_results = recursive_embedding_with_cluster_summarization(
            next_level_texts, 
            number_of_levels, 
            level + 1,
            target_dim,
            threshold
        )
        results.update(next_level_results)
    
    return results
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, the code might seem a bit daunting at first glance, but don’t worry! Just give it a couple of looks, and it will start to make sense. Essentially, we’re just following the flow I mentioned earlier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def process_text_hierarchy(
    texts: List[str], 
    number_of_levels: int = 3,
    target_dim: int = 10,
    threshold: float = 0.1
) -&amp;gt; Dict[str, pd.DataFrame]:
    hierarchy_results = recursive_embedding_with_cluster_summarization(
        texts, number_of_levels, target_dim=target_dim, threshold=threshold
    )
    
    processed_results = {}
    for level, (df_clusters, df_summaries) in hierarchy_results.items():
        if df_clusters.empty or df_summaries.empty:
            print(f&quot;No data for level {level}. Skipping.&quot;)
            continue
        processed_results[f&quot;level_{level}_clusters&quot;] = df_clusters
        processed_results[f&quot;level_{level}_summaries&quot;] = df_summaries
    
    return processed_results


results = process_text_hierarchy(chunks, number_of_levels=3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/improving-raptor-with-rag/building-a-raptor-tree.png?raw=true&quot; alt=&quot;self-made-flow&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;inference&quot;&gt;Inference&lt;/h3&gt;

&lt;p&gt;Now that we have our tree structure with leaf nodes at the bottom and summarized nodes in between, it’s time to query the RAG. There are two main methods for navigating the RAPTOR tree: Tree Traversal and Collapsed Tree Retrieval.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Tree Traversal Retrieval:&lt;/strong&gt; This method systematically explores the tree, starting from the root node. It first selects the top-k most relevant root nodes based on their cosine similarity to the query embedding. Then, for each selected root node, its children are considered in the next layer, where the top-k nodes are again selected based on their cosine similarity to the query vector. This process repeats until we reach the leaf nodes. Finally, the text from all the selected nodes is concatenated to form the retrieved context.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Collapsed Tree Retrieval:&lt;/strong&gt; This approach simplifies things by viewing the tree as a single layer. Here, it directly compares the query embedding to the vector embeddings of all the leaf nodes (the original text chunks) and summary nodes. This method works best for factual, keyword-based queries where you need specific details.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/improving-raptor-with-rag/raptor-reference.png?raw=true&quot; alt=&quot;raptor-methods&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the collapsed tree retrieval, we flatten the tree into one layer, retrieving nodes based on cosine similarity until we reach a specified number of &lt;strong&gt;&lt;em&gt;top k documents&lt;/em&gt;&lt;/strong&gt;. In our code, we’ll gather the textual chunks from earlier, along with the summarized nodes at each level for all the clusters, to create one big list of texts that includes both the root documents and the summarized nodes.&lt;/p&gt;

&lt;p&gt;To be honest, if you look closely, we’ve been essentially adding more data points (chunks) to our RAG setup all along. Using RAPTOR, we now have both the original chunks and the summarized chunks for each cluster. Now, we’ll simply embed all these new data points and store them in a vector database along with their embeddings and use them for RAG.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;raptor_texts = []
for level, row in results.items():
    if level.endswith(&quot;clusters&quot;):
        raptor_texts.extend(row[&quot;texts&quot;])
    else:
        raptor_texts.extend(row[&quot;summaries&quot;])
        
raptor_embeddings = embedding_model.encode(raptor_texts)
len(raptor_embeddings)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;setting-up-vector-database-and-rag&quot;&gt;Setting up Vector Database and RAG&lt;/h3&gt;

&lt;p&gt;Now it’s smooth sailing! We’ll just set up a LanceDB vector database to store our embeddings and query our RAG setup.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;raptor_embeddings = embedding_model.encode(raptor_texts)

raptor_dict = {&quot;texts&quot;: [], &quot;embeddings&quot;: []}
for texts, embeddings in zip(raptor_texts, raptor_embeddings):
    raptor_dict[&quot;texts&quot;].append(texts)
    raptor_dict[&quot;embeddings&quot;].append(embeddings.tolist())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import lancedb
import pyarrow as pa
from lancedb.pydantic import Vector, LanceModel

uri = &quot;lancedb_database&quot;
db = lancedb.connect(uri)

class RAG(LanceModel):
    texts : str
    embeddings : Vector(384)

table_name = &quot;rag_with_raptor&quot;
raptor_table = db.create_table(table_name, schema = RAG, mode=&quot;overwrite&quot;)
raptor_table.add(rag_raptor_df)
raptor_table.create_fts_index(&quot;texts&quot;, replace=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time to generate the results..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def generate_results(
    query : str,
    context_text : str
) -&amp;gt; str:

    prompt = f&quot;&quot;&quot;
    Based on the context provided, use it to answer the query. 

    query : {query}

    Instructions:
    1. Don&apos;t make things up, Just use the contexts and generate the relevant answer.
    2. Don&apos;t mix the numbers, Just use the numbers in the context.
    3. Don&apos;t try to use fancy words, stick to the basics of the language that is being used in the context.
    
    {context_text}
    &quot;&quot;&quot;
    response = client.chat.completions.create(
        model=&quot;gpt-4&quot;, 
        messages=[
            {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are a helpful assistant that answers query and give the answers.&quot;},
            {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: prompt}
        ],
        max_tokens=200,
        n=1,
        stop=None,
        temperature=0.7
    )
    answer = response.choices[0].message.content.strip()
    return answer
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;query = &quot;NTT DATA&apos;s net income attributable to shareholders increased from ¥69,227 million in Q3 FY2020 to ¥110,191 million in Q3 FY2021. How does this growth align with their acquisition strategy, particularly considering their stated reasons for acquiring Nexient, LLC and the provisional goodwill recorded in this transaction?&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our query, there are several key points that must be addressed when crafting the answers. First, we need to note the increase in net income from ¥69,227 million in Q3 FY2020 to ¥110,191 million in Q3 FY2021. Second, we should examine how this growth aligns with NTT DATA’s acquisition strategy, particularly their reasons for acquiring Nexient, LLC, and the provisional goodwill recorded in the transaction. With this context in mind, I created a VANILLA RAG to compare its results with those of RAPTOR RAG.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;normal_embeddings = embedding_model.encode(chunks) # default chunks from our data

normal_dict = {&quot;texts&quot;: [], &quot;embeddings&quot;: []}
for texts, embeddings in zip(chunks, normal_embeddings):
    normal_dict[&quot;texts&quot;].append(texts)
    normal_dict[&quot;embeddings&quot;].append(embeddings.tolist())
    
rag_normal_df = pd.DataFrame(normal_dict)

table_name = &quot;rag_without_raptor&quot;
normal_table = db.create_table(table_name, schema = RAG, mode=&quot;overwrite&quot;)
normal_table.add(rag_normal_df)
normal_table.create_fts_index(&quot;texts&quot;, replace=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With RAPTOR, we now have an increased number of chunks due to the addition of cluster-level summary nodes alongside the default chunks we had earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/improving-raptor-with-rag/chunk-comparison.png?raw=true&quot; alt=&quot;comparison-of-raptor-chunks&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;d-day&quot;&gt;D-Day&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;raptor_contexts = raptor_table.search(query).limit(5).select([&quot;texts&quot;]).to_list()
raptor_context_text = &quot;------\n\n&quot;.join([context[&quot;texts&quot;] for context in raptor_contexts])
raptor_context_text = &quot;------\n\n&quot; + raptor_context_text

normal_contexts = normal_table.search(query).limit(5).select([&quot;texts&quot;]).to_list()
normal_context_text = &quot;------\n\n&quot;.join([context[&quot;texts&quot;] for context in normal_contexts])
normal_context_text = &quot;------\n\n&quot; + normal_context_text

raptor_answer = generate_results(query, raptor_context_text)
normal_answer = generate_results(query, normal_context_text)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/improving-raptor-with-rag/raptor-vs-vanilla.png?raw=true&quot; alt=&quot;difference-between-raptor-and-vanilla&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we are comparing RAPTOR RAG with Vanilla RAG, it’s clear that RAPTOR performs better. Not only does RAPTOR retrieve details about the financial growth, but it also effectively connects this growth to the broader acquisition strategy, pulling relevant context from multiple sources. It excels in situations like this, where the query requires insights from various pages, making it more adept at handling complex, layered information retrieval.&lt;/p&gt;

&lt;p&gt;And that’s a wrap for this article! If you want to dig into the intricacies of how everything works, I’d suggest checking out the official RAPTOR &lt;a href=&quot;https://github.com/parthsarthi03/raptor/tree/master&quot;&gt;GitHub repository&lt;/a&gt; for more info and resources. For an even deeper dive, the official &lt;a href=&quot;https://arxiv.org/pdf/2401.18059&quot;&gt;paper&lt;/a&gt; is a great read and highly recommended!  Here is the Google &lt;a href=&quot;https://colab.research.google.com/drive/1I3WI0U4sgb2nc1QTQm51kThZb2q4MXyr?usp=sharing&quot;&gt;colab&lt;/a&gt; for your reference.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Multi Document Agentic RAG</title>
   <link href="http://localhost:4000/2024/08/16/multi-document-agentic-rag"/>
   <updated>2024-08-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/08/16/multi-document-agentic-rag</id>
   <content type="html">&lt;p&gt;Agentic RAG (Retrieval-Augmented Generation) represents a significant leap in how we handle information. Traditional &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/02/14/rag-application-with-langchain&quot;&gt;RAG&lt;/a&gt; systems are built to retrieve information and relevant context which are then passively send that to a language model (LLM) to generate responses. However, Agentic RAG takes this further by adding more independence. Now, the system can not only gather data but also make decisions and take actions on its own.&lt;/p&gt;

&lt;p&gt;Think of it as a shift from simple tools to smarter, more capable systems. Agentic RAG transforms what was once a passive process into an active one, where AI can work towards specific goals without needing constant guidance.&lt;/p&gt;

&lt;h3 id=&quot;how-does-an-agentic-rag-work&quot;&gt;How Does an Agentic RAG Work?&lt;/h3&gt;

&lt;p&gt;To understand Agentic RAG, let’s first break down what an “agent” is. Simply put, an agent is a smart system capable of making decisions on its own. When given a question or task, it figures out the best way to handle it by breaking the task into smaller steps and using the right tools to complete it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/multi-document-agentic-rag/whole-process.png?raw=true&quot; alt=&quot;Multi Document Agentic RAG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, when we talk about Agentic RAG, we’re taking this concept further. Instead of just retrieving information like regular RAG, Agentic RAG uses intelligent strategies to ensure the system provides the best possible response. It doesn’t stop at giving a basic, context-aware reply. Instead, these agents think through the query, select the right approach, and deliver a more thoughtful and refined answer. It’s like having a team of smart agents working together to solve a problem, one step at a time.&lt;/p&gt;

&lt;p&gt;Here’s how the process works:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Understanding the Query&lt;/strong&gt;: The agent starts by analyzing the question to grasp its specifics. It looks at the context, purpose, and intent to determine what information is needed.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Using Memory&lt;/strong&gt;: The agent checks its memory for relevant information from past tasks that might assist with the current query.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Choosing Tools&lt;/strong&gt;: Agentic RAG agents are designed to be intuitive. After analyzing the query, they evaluate available tools and resources to select the best method for retrieving the precise information. It’s like having a savvy assistant who knows exactly where to look, even for the most challenging questions.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;how-to-use-it&quot;&gt;How to Use it?&lt;/h3&gt;

&lt;p&gt;Let’s dive into developing an automotive-themed RAG agent based on our current understanding.&lt;/p&gt;

&lt;p&gt;Consider a scenario where you own a vehicle and require assistance with tasks ranging from diagnosing issues to planning routine maintenance. Now imagine a specialized agent designed specifically for this purpose. This agent should be capable of interpreting your car’s symptoms, analyzing the issue, and delivering a detailed diagnosis, including potential causes.&lt;/p&gt;

&lt;p&gt;Furthermore, the bot should assist with identifying specific parts, estimating repair costs, or creating a personalized maintenance schedule based on your vehicle’s mileage and model. This agent must effectively manage a range of tasks by utilizing relevant context from various datasources, employing different tools, and reasoning with the available information to provide accurate and meaningful responses. Given the complexity of these tasks, which involves multiple retrieval and reasoning steps, I am going to use &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/03/15/embedded-databases&quot;&gt;LanceDB&lt;/a&gt; to ensure fast retrieval by storing relevant embedded data chunks into it.&lt;/p&gt;

&lt;p&gt;To meet our data needs, I will use six JSON files, each containing specific types of information for querying. You can get these JSON files here : &lt;a href=&quot;https://github.com/lancedb/vectordb-recipes/tree/main/examples/multi-document-agentic-rag/json_files?ref=blog.lancedb.com&quot;&gt;Data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s a brief overview of each file:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;car_maintenance.json&lt;/strong&gt;: Contains details about the car’s maintenance schedule, including relevant tasks based on mileage and estimated time for completion.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;car_problems.json&lt;/strong&gt;: Provides information on various car problems, including a brief description of each issue, required parts for resolution, estimated repair time, and other relevant metadata.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;car_parts.json&lt;/strong&gt;: Lists car parts used for maintenance and diagnosis, detailing their brands, categories, whether they are solid or liquid, and other relevant attributes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;car_diagnosis.json&lt;/strong&gt;: Outlines the diagnosis process, potential causes based on symptoms, recommended actions, and related problems. The issues and parts mentioned should align with those in &lt;strong&gt;car_problems.json&lt;/strong&gt; and &lt;strong&gt;car_parts.json&lt;/strong&gt; to ensure the agent has relevant context for problem-solving.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;car_cost_estimates.json&lt;/strong&gt;: Provides cost estimates for addressing car problems, based on the issues listed in &lt;strong&gt;car_problems.json&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;car_models.json&lt;/strong&gt;: Contains information on common problems associated with specific car models, such as a 2017 Honda Accord with 190,000 kilometers, detailing typical issues that users might encounter in this range.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please review the JSON files to see their structure and feel free to make any changes.&lt;/p&gt;

&lt;h3 id=&quot;how-to-tech-stack&quot;&gt;How to: Tech Stack&lt;/h3&gt;

&lt;p&gt;To build our ReAct-like agent, we’ll be using a few key tools to make things run smoothly:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LlamaIndex&lt;/strong&gt;: Think of &lt;a href=&quot;https://www.llamaindex.ai/&quot;&gt;LlamaIndex&lt;/a&gt; as the backbone of our agent. This framework will be central to our implementation. It facilitates the abstraction of agentic logic. If the specifics seem unclear now, they will become more evident as we proceed with the implementation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Memory Management&lt;/strong&gt;: When we query the agent, it handles each question on its own without remembering past interactions or in isolation without maintaining state. To address this, we will use memory to retain conversational history. The agent stores chat history in a conversational memory buffer, which by default is a flat list managed by LlamaIndex. This ensures that the agent can refer to past as well as current conversation when deciding on the next set of actions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Vector Databases&lt;/strong&gt;: For the retrieval process, we will use VectorDBs. Queries will be embedded and matched semantically against the relevant VectorDB through our retrievers. We will employ &lt;a href=&quot;https://github.com/lancedb/lancedb&quot;&gt;LanceDB&lt;/a&gt; due to its exceptional retrieval speed and on-disk storage capabilities, which allows for local management of our database. Additionally, being open-source and free, it fits within our budget constraints.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LLM Integration&lt;/strong&gt;: On the language model side, we’ll go with OpenAI’s GPT-4 for generating responses. For embeddings, we’re using Hugging face which provides seamless integration of local embedding models.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ok I think this is enough, let’s dive in for our code part..&lt;/p&gt;

&lt;h3 id=&quot;environment-setup&quot;&gt;Environment Setup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import os
import tqdm
import json
import time
from typing import List, Optional, Dict, Any
from tqdm import tqdm
import logging
from llama_index.core import (
    SimpleDirectoryReader, 
    VectorStoreIndex, 
    StorageContext,
    Settings,
    Document,
)
from datetime import datetime, timedelta
from llama_index.core.node_parser import SentenceSplitter
from llama_index.vector_stores.lancedb import LanceDBVectorStore
from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from llama_index.llms.openai import OpenAI
from llama_index.core.tools import FunctionTool, ToolOutput
from llama_index.core.retrievers import VectorIndexRetriever
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.agent import AgentRunner

import os
os.environ[&quot;TOKENIZERS_PARALLELISM&quot;] = &quot;false&quot;

# Load environment variables
OPENAI_API_KEY = os.getenv(&apos;OPENAI_API_KEY&apos;)
if not OPENAI_API_KEY:
    raise ValueError(&quot;Please set the OPENAI_API_KEY environment variable.&quot;)

# LLM setup
llm = OpenAI(model=&quot;gpt-4&quot;, api_key=OPENAI_API_KEY)

# Embedding model setup
embed_model = HuggingFaceEmbedding(model_name=&quot;sentence-transformers/all-MiniLM-L6-v2&quot;)

# Update the Settings with the new embedding model
Settings.embed_model = embed_model
Settings.chunk_size = 512
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure your &lt;code&gt;.env&lt;/code&gt; file includes the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;. You can adjust and use different LLMs and embedding models as needed. The key is to have an LLM for reasoning and an embedding model to handle data embedding. Feel free to experiment with various models to find the best fit for your needs.&lt;/p&gt;

&lt;h3 id=&quot;step-1--creating-our-dbs&quot;&gt;Step 1 : Creating our DBs&lt;/h3&gt;

&lt;p&gt;Let’s setup our database which will be used to store our data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Vector store setup
problems_vector_store = LanceDBVectorStore(
    uri=&apos;./lancedb&apos;,
    table_name=&apos;problems_table&apos;,
    mode=&quot;overwrite&quot;,
)

parts_vector_store = LanceDBVectorStore(
    uri=&apos;./lancedb&apos;,
    table_name=&apos;parts_table&apos;,
    mode=&quot;overwrite&quot;,
)

diagnostics_vector_store = LanceDBVectorStore(
    uri=&apos;./lancedb&apos;,
    table_name=&apos;diagnostics_table&apos;,
    mode=&quot;overwrite&quot;,
)

cost_estimates_vector_store = LanceDBVectorStore(
    uri=&apos;./lancedb&apos;,
    table_name=&apos;cost_estimates_table&apos;,
    mode=&quot;overwrite&quot;,
)

maintenance_schedules_vector_store = LanceDBVectorStore(
    uri=&apos;./lancedb&apos;,
    table_name=&apos;maintenance_schedules_table&apos;,
    mode=&quot;overwrite&quot;,
)

cars_vector_store = LanceDBVectorStore(
    uri=&apos;./lancedb&apos;,
    table_name=&apos;car_maintenance_table&apos;,
    mode=&quot;overwrite&quot;,
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we’re dealing with various types of information, we’ll need multiple tables to organize and retrieve our data effectively. The &lt;code&gt;uri&lt;/code&gt; specifies that our data is stored in a database called &lt;code&gt;lancedb&lt;/code&gt;, which contains different tables for each type of data. Let’s go ahead and load the data into the appropriate tables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def load_and_index_documents(directory: str, vector_store: LanceDBVectorStore) -&amp;gt; VectorStoreIndex:
    &quot;&quot;&quot;Load documents from a directory and index them.&quot;&quot;&quot;
    documents = SimpleDirectoryReader(input_dir=directory).load_data()
    parser = SentenceSplitter(chunk_size=1024, chunk_overlap=200)
    nodes = parser.get_nodes_from_documents(documents)
    storage_context = StorageContext.from_defaults(vector_store=vector_store)
    return VectorStoreIndex(nodes, storage_context=storage_context)

def create_retriever(index: VectorStoreIndex) -&amp;gt; VectorIndexRetriever:
    &quot;&quot;&quot;Create a retriever from the index.&quot;&quot;&quot;
    return index.as_retriever(similarity_top_k=5)

# Load and index documents
problems_index = load_and_index_documents(&quot;../rag-agentic-system/problems&quot;, problems_vector_store)
parts_index = load_and_index_documents(&quot;../rag-agentic-system/parts&quot;, parts_vector_store)
cars_index = load_and_index_documents(&quot;../rag-agentic-system/cars_models&quot;, cars_vector_store)
diagnostics_index = load_and_index_documents(&quot;../rag-agentic-system/diagnostics&quot;, diagnostics_vector_store)
cost_estimates_index = load_and_index_documents(&quot;../rag-agentic-system/cost_estimates&quot;, cost_estimates_vector_store)
maintenance_schedules_index = load_and_index_documents(&quot;../rag-agentic-system/maintenance_schedules&quot;, maintenance_schedules_vector_store)


problems_retriever = create_retriever(problems_index)
parts_retriever = create_retriever(parts_index)
cars_retriever = create_retriever(cars_index)
diagnostics_retriever = create_retriever(diagnostics_index)
cost_estimates_retriever = create_retriever(cost_estimates_index)
maintenance_retriever = create_retriever(maintenance_schedules_index)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each Vector DB will provide a retriever instance, a Python object that returns a list of documents matching a given query. For example, our problems_retriever will fetch documents related to car problems based on the query, while cars_retriever will help identify common issues faced by customers with their vehicles.&lt;/p&gt;

&lt;p&gt;Keep in mind that if the bot misses some information or seems to hallucinate, it might be due to missing data in our JSON files. If you spot any inaccuracies or gaps, add the relevant data to the JSON files and re-index them to ensure everything stays up to date.&lt;/p&gt;

&lt;p&gt;Now, let’s test our retrievers to ensure they’re working correctly.&lt;/p&gt;

&lt;h3 id=&quot;step-2--testing-our-retrievers&quot;&gt;Step 2 : Testing our retrievers&lt;/h3&gt;

&lt;p&gt;Let’s test our &lt;code&gt;cost_estimates_retriever&lt;/code&gt; to ensure it’s working properly. We’ll use a query related to a brake problem and check if the retriever returns the correct documents about cost estimates. Additionally, I’ll verify if our query engine is accurately interpreting the query and if, by providing the relevant documents, we are receiving the correct response.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;query = &quot;My brake pad isn&apos;t working or I don&apos;t know, but the brakes are poor, and by the way, what&apos;s the cost for the solution?&quot;
query_engine = cost_estimates_index.as_query_engine()
response = query_engine.query(query)
results = cost_estimates_retriever.retrieve(query)

print(f&quot;Response: {response}&quot;)

for result in results:
    print(f&quot;Result - Node ID: {result.node_id}&quot;)
    print(f&quot;Relevant Text: {result.text[:100]}...&quot;)  
    print(f&quot;Score: {result.score:.3f}&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the output I’m receiving in the cell&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Response: The cost for the solution to address the issue with your brake pad would be around $100 to $300 for brake pad replacement.
Result - Node ID: 51b91e6e-1243-405b-a742-89e09d78616f
Relevant Text: [
    {
        &quot;repair&quot;: &quot;Brake pad replacement&quot;,
        &quot;average_cost&quot;: 150,
        &quot;cost_range&quot;: {
            &quot;min&quot;: 100,
            &quot;max&quot;: 300...
Score: 0.584
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything looks good—our retriever is working as expected. We’re ready to move on to the next step.&lt;/p&gt;

&lt;h3 id=&quot;step-3--creating-our-agentic-tools&quot;&gt;Step 3 : Creating our agentic tools&lt;/h3&gt;

&lt;p&gt;LlamaIndex Agents are designed to process natural language input to execute actions rather than simply generating responses. The effectiveness of these agents relies on how well we abstract and utilize tools. So, what exactly does “tool” mean in this context? To clarify, imagine tools as weapons given to a warrior in battle. Just as a warrior might choose different weapons based on the opponent’s tactics, tools for our agent are like specialized API interfaces that help the agent interact with data sources or reason through queries to deliver the best possible responses.&lt;/p&gt;

&lt;p&gt;In LlamaIndex, there are various types of tools. One important type is the &lt;code&gt;FunctionTool&lt;/code&gt;, which transforms any user-defined function into a tool, capable of inferring the function’s schema and usage. These tools are essential for our agents, allowing them to reason about queries and perform actions effectively.&lt;/p&gt;

&lt;p&gt;For each tool, it’s essential to provide a clear description of its purpose and functionality, as this helps the agent use the tool effectively. To start, we will create tools to leverage the retriever objects defined earlier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
max_context_information = 200

def retrieve_problems(query: str) -&amp;gt; str:
    &quot;&quot;&quot;Searches the problem catalog to find relevant automotive problems for the query.&quot;&quot;&quot;
    docs = problems_retriever.retrieve(query)
    information = str([doc.text[:max_context_information]for doc in docs])
    return information
    
def retrieve_parts(query: str) -&amp;gt; str:
    &quot;&quot;&quot;Searches the parts catalog to find relevant parts for the query.&quot;&quot;&quot;
    docs = parts_retriever.retrieve(query)
    information = str([doc.text[:max_context_information]for doc in docs])
    return information

def retrieve_car_details(make: str, model: str, year: int) -&amp;gt; str:
    &quot;&quot;&quot;Retrieves the make, model, and year of the car.&quot;&quot;&quot;
    docs = car_details_retriever.retrieve(make, model, year)
    information = str([doc.text[:max_context_information]for doc in docs])

def diagnose_car_problem(symptoms: str) -&amp;gt; str:
    &quot;&quot;&quot;Uses the diagnostics database to find potential causes for given symptoms.&quot;&quot;&quot;
    docs = diagnostics_retriever.retrieve(symptoms)
    information = str([doc.text[:max_context_information]for doc in docs])
    return information

def estimate_repair_cost(problem: str) -&amp;gt; str:
    &quot;&quot;&quot;Provides a cost estimate for a given car problem or repair.&quot;&quot;&quot;
    docs = cost_estimates_retriever.retrieve(problem)
    information = str([doc.text[:max_context_information]for doc in docs])
    return information

def get_maintenance_schedule(mileage: int) -&amp;gt; str:
    &quot;&quot;&quot;Retrieves the recommended maintenance schedule based on mileage.&quot;&quot;&quot;
    docs = maintenance_retriever.retrieve(str(mileage))
    information = str([doc.text[:max_context_information]for doc in docs])
    return information

retrieve_problems_tool = FunctionTool.from_defaults(fn=retrieve_problems)
retrieve_parts_tool = FunctionTool.from_defaults(fn=retrieve_parts)
diagnostic_tool = FunctionTool.from_defaults(fn=diagnose_car_problem)
cost_estimator_tool = FunctionTool.from_defaults(fn=estimate_repair_cost)
maintenance_retriever_tool = FunctionTool.from_defaults(fn=get_maintenance_schedule)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the retriever tools now set up, our agent can effectively select the appropriate tool based on the query and fetch the relevant contexts. Next, we’ll create additional helper tools that will complement the existing ones, providing the agent with more context and enhancing its reasoning capabilities.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def comprehensive_diagnosis(symptoms: str) -&amp;gt; str:
    &quot;&quot;&quot;
    Provides a comprehensive diagnosis including possible causes, estimated costs, and required parts.
    
    Args:
        symptoms: A string describing the car&apos;s symptoms.
    
    Returns:
        A string with a comprehensive diagnosis report.
    &quot;&quot;&quot;
    # Use existing tools
    possible_causes = diagnose_car_problem(symptoms)
    
    # Extract the most likely cause (this is a simplification)
    likely_cause = possible_causes[0] if possible_causes else &quot;Unknown issue&quot;
    
    estimated_cost = estimate_repair_cost(likely_cause)
    required_parts = retrieve_parts(likely_cause)
    
    report = f&quot;Comprehensive Diagnosis Report:\n\n&quot;
    report += f&quot;Symptoms: {symptoms}\n\n&quot;
    report += f&quot;Possible Causes:\n{possible_causes}\n\n&quot;
    report += f&quot;Most Likely Cause: {likely_cause}\n\n&quot;
    report += f&quot;Estimated Cost:\n{estimated_cost}\n\n&quot;
    report += f&quot;Required Parts:\n{required_parts}\n\n&quot;
    report += &quot;Please note that this is an initial diagnosis. For accurate results, please consult with our professional mechanic.&quot;
    
    return report

def plan_maintenance(mileage: int, car_make: str, car_model: str, car_year: int) -&amp;gt; str:
    &quot;&quot;&quot;
    Creates a comprehensive maintenance plan based on the car&apos;s mileage and details.
    
    Args:
        mileage: The current mileage of the car.
        car_make: The make of the car.
        car_model: The model of the car.
        car_year: The year the car was manufactured.
    
    Returns:
        A string with a comprehensive maintenance plan.
    &quot;&quot;&quot;
    car_details = retrieve_car_details(car_make, car_model, car_year)
    car_model_info = get_car_model_info(mileage, car_make, car_model, car_year)
    
    plan = f&quot;Maintenance Plan for {car_year} {car_make} {car_model} at {mileage} miles:\n\n&quot;
    plan += f&quot;Car Details: {car_details}\n\n&quot;
    
    if car_model_info:
        plan += f&quot;Common Issues:\n&quot;
        for issue in car_model_info[&apos;common_issues&apos;]:
            plan += f&quot;- {issue}\n&quot;
        
        plan += f&quot;\nEstimated Time: {car_model_info[&apos;estimated_time&apos;]}\n\n&quot;
    else:
        plan += &quot;No specific maintenance tasks found for this car model and mileage.\n\n&quot;
    
    plan += &quot;Please consult with our certified mechanic for a more personalized maintenance plan.&quot;
    
    return plan

def create_calendar_invite(event_type: str, car_details: str, duration: int = 60) -&amp;gt; str:
    &quot;&quot;&quot;
    Simulates creating a calendar invite for a car maintenance or repair event.
    
    Args:
        event_type: The type of event (e.g., &quot;Oil Change&quot;, &quot;Brake Inspection&quot;).
        car_details: Details of the car (make, model, year).
        duration: Duration of the event in minutes (default is 60).
    
    Returns:
        A string describing the calendar invite.
    &quot;&quot;&quot;
    # Simulate scheduling the event for next week
    event_date = datetime.now() + timedelta(days=7)
    event_time = event_date.replace(hour=10, minute=0, second=0, microsecond=0)
    
    invite = f&quot;Calendar Invite Created:\n\n&quot;
    invite += f&quot;Event: {event_type} for {car_details}\n&quot;
    invite += f&quot;Date: {event_time.strftime(&apos;%Y-%m-%d&apos;)}\n&quot;
    invite += f&quot;Time: {event_time.strftime(&apos;%I:%M %p&apos;)}\n&quot;
    invite += f&quot;Duration: {duration} minutes\n&quot;
    invite += f&quot;Location: Your Trusted Auto Shop, 123 Main St, Bengaluru, India\n\n&quot;
    
    return invite

def coordinate_car_care(query: str, car_make: str, car_model: str, car_year: int, mileage: int) -&amp;gt; str:
    &quot;&quot;&quot;
    Coordinates overall car care by integrating diagnosis, maintenance planning, and scheduling.
    
    Args:
        query: The user&apos;s query or description of the issue.
        car_make: The make of the car.
        car_model: The model of the car.
        car_year: The year the car was manufactured.
        mileage: The current mileage of the car.
    
    Returns:
        A string with a comprehensive car care plan.
    &quot;&quot;&quot;
    car_details = retrieve_car_details(car_make, car_model, car_year)
    
    # Check if it&apos;s a problem or routine maintenance
    if &quot;problem&quot; in query.lower() or &quot;issue&quot; in query.lower():
        diagnosis = comprehensive_diagnosis(query)
        plan = f&quot;Based on your query, here&apos;s a diagnosis:\n\n{diagnosis}\n\n&quot;
        
        # Extract the most likely cause (this is a simplification)
        likely_cause = diagnosis.split(&quot;Most Likely Cause:&quot;)[1].split(&quot;\n&quot;)[0].strip()
        
        # Create a calendar invite for repair
        invite = create_calendar_invite(f&quot;Repair: {likely_cause}&quot;, car_details)
        plan += f&quot;I&apos;ve prepared a calendar invite for the repair:\n\n{invite}\n\n&quot;
    else:
        maintenance_plan = plan_maintenance(mileage, car_make, car_model, car_year)
        plan = f&quot;Here&apos;s your maintenance plan:\n\n{maintenance_plan}\n\n&quot;
        
        # Create a calendar invite for the next maintenance task
        next_task = maintenance_plan.split(&quot;Task:&quot;)[1].split(&quot;\n&quot;)[0].strip()
        invite = create_calendar_invite(f&quot;Maintenance: {next_task}&quot;, car_details)
        plan += f&quot;I&apos;ve prepared a calendar invite for your next maintenance task:\n\n{invite}\n\n&quot;
    
    plan += &quot;Remember to consult with a professional mechanic for personalized advice and service.&quot;
    
    return plan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, we’ll implement some helper functions that, while not tools themselves, will be used internally within the tools to support the logic and enhance their functionality.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_car_model_info(mileage: int, car_make: str, car_model: str, car_year: int) -&amp;gt; dict:
    &quot;&quot;&quot;Retrieve car model information from cars_models.json.&quot;&quot;&quot;
    with open(&apos;cars_models/cars_models.json&apos;, &apos;r&apos;) as file:
        car_models = json.load(file)

    for car in car_models:        
        if (car[&apos;car_make&apos;].lower() == car_make.lower() and car[&apos;car_model&apos;].lower() == car_model.lower() and car[&apos;car_year&apos;] == car_year):
            return car
    return {}

def retrieve_car_details(make: str, model: str, year: int) -&amp;gt; str:
    &quot;&quot;&quot;Retrieves the make, model, and year of the car and return the common issues if any.&quot;&quot;&quot;
    car_details = get_car_model_info(0, make, model, year)  # Using 0 for mileage to get general details
    if car_details:
        return f&quot;{year} {make} {model} - Common Issues: {&apos;, &apos;.join(car_details[&apos;common_issues&apos;])}&quot;
    return f&quot;{year} {make} {model} - No common issues found.&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the additional tools in their complete form&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;comprehensive_diagnostic_tool = FunctionTool.from_defaults(fn=comprehensive_diagnosis)
maintenance_planner_tool = FunctionTool.from_defaults(fn=plan_maintenance)
calendar_invite_tool = FunctionTool.from_defaults(fn=create_calendar_invite)
car_care_coordinator_tool = FunctionTool.from_defaults(fn=coordinate_car_care)
retrieve_car_details_tool = FunctionTool.from_defaults(fn=retrieve_car_details)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let’s combine all these tools into a comprehensive tools list, which we will pass to our agent to utilize.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;tools = [
    retrieve_problems_tool,
    retrieve_parts_tool,
    diagnostic_tool,
    cost_estimator_tool,
    maintenance_schedule_tool,
    comprehensive_diagnostic_tool,
    maintenance_planner_tool,
    calendar_invite_tool,
    car_care_coordinator_tool,
    retrieve_car_details_tool
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;step-4--creating-the-agent&quot;&gt;Step 4 : Creating the Agent&lt;/h3&gt;

&lt;p&gt;Now that we’ve defined the tools, we’re ready to create the agent. With LlamaIndex, this involves setting up an Agent reasoning loop. Basically, this loop allows our agent to handle complex questions that might require multiple steps or clarifications. Essentially, our agent can reason through tools and complete tasks across several stages.&lt;/p&gt;

&lt;p&gt;LlamaIndex provides two main components for creating an agent: &lt;code&gt;AgentRunner&lt;/code&gt; and &lt;code&gt;AgentWorkers&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;AgentRunner&lt;/code&gt; acts as the orchestrator, like in a symphony, managing the overall process. It handles the current state, conversational memory, and tasks, and it runs steps for each task while providing a high-level user interface on what’s going on. On the other hand, &lt;code&gt;AgentWorkers&lt;/code&gt; are responsible for the operational side. They select and use the tools and choose the LLM to interact with these tools effectively.&lt;/p&gt;

&lt;p&gt;Now, let’s set up both the AgentRunner and AgentWorker to bring our agent to life.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Function to reset the agent&apos;s memory
def reset_agent_memory():
    global agent_worker, agent
    agent_worker = FunctionCallingAgentWorker.from_tools(
        tools, 
        llm=llm, 
        verbose=True
    )
    agent = AgentRunner(agent_worker)

# Initialize the agent
reset_agent_memory()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time you call &lt;code&gt;reset_agent_memory()&lt;/code&gt;, a new, fresh agent is created, ready to reason through and act on the user’s query.&lt;/p&gt;

&lt;p&gt;With everything now set up—our tools, an agent for reasoning, and databases for retrieving relevant context—let’s test to see if our agent can handle simple questions effectively.&lt;/p&gt;

&lt;h3 id=&quot;step-5--d-day&quot;&gt;Step 5 : D-Day&lt;/h3&gt;

&lt;p&gt;Let’s ask the agent a straightforward question related to car maintenance based on the mileage count and see how well it handles it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;response = agent.query(
    &quot;My car has 60,000 miles on it. What maintenance should I be doing now, and how much will it cost?&quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the response I got is&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Added user message to memory: My car has 60,000 miles on it. What maintenance should I be doing now, and how much will it cost?
=== Calling Function ===
Calling function: get_maintenance_schedule with args: {&quot;mileage&quot;: 60000}

=== Calling Function ===
Calling function: estimate_repair_cost with args: {&quot;problem&quot;: &quot;Oil and filter change&quot;}

=== Calling Function ===
Calling function: estimate_repair_cost with args: {&quot;problem&quot;: &quot;Tire rotation&quot;}

=== Calling Function ===
Calling function: estimate_repair_cost with args: {&quot;problem&quot;: &quot;Air filter replacement&quot;}

=== Calling Function ===
Calling function: estimate_repair_cost with args: {&quot;problem&quot;: &quot;Brake inspection&quot;}

=== LLM Response ===
At 60,000 miles, the recommended maintenance tasks for your car are:

1. Oil and filter change: This typically costs around $250.
2. Tire rotation: The average cost for this service is around $50.
3. Air filter replacement: This usually costs about $70.
4. Brake inspection: The cost for this can vary, but it&apos;s typically around $100.

Please note that these are average costs and can vary based on your location and the specific make and model of your car. It&apos;s always a good idea to get a few quotes from different service providers.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, this is amazing! The agent effectively understood the query and provided an excellent response. Notice how it first called the &lt;code&gt;maintenance_schedule_tool&lt;/code&gt;, which utilized the &lt;code&gt;get_maintenance_schedule&lt;/code&gt; retriever object to gather context on the relevant maintenance schedule, including different tasks based on the car’s mileage. This context was then used by the &lt;code&gt;cost_estimator_tool&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The best part is that it passed the relevant parameters—problems extracted from the &lt;code&gt;maintenance_schedule_tool&lt;/code&gt;—to the cost estimator tool, deciding on its own based on the user query. Finally, with all the gathered context, it produced a comprehensive response that perfectly addresses the user’s needs.&lt;/p&gt;

&lt;p&gt;Btw, If you want the agent to retain the context of previous conversations, replace &lt;code&gt;.query&lt;/code&gt; with &lt;code&gt;.chat&lt;/code&gt; to ensure context is preserved. Keep in mind that the context size is limited by the information you provide when calling the retrievers. Watch out for the &lt;code&gt;max_context_information&lt;/code&gt; parameter in the retrievers to avoid exceeding the token limits for the LLMs.&lt;/p&gt;

&lt;p&gt;And that’s it! You’ve successfully created an agentic RAG that not only understands the user’s query but also delivers a well-reasoned and contextually accurate answer. Here is the colab for this example: &lt;img src=&quot;https://colab.research.google.com/github/lancedb/vectordb-recipes/blob/main/examples/multi-document-agentic-rag/main.ipynb?ref=blog.lancedb.com#scrollTo=Q1Z8S3epC5So&quot; alt=&quot;colab&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Zero Shot Image Classification with LanceDB and OpenAI&apos;s CLIP</title>
   <link href="http://localhost:4000/2024/07/14/zero-shot-image-classification"/>
   <updated>2024-07-14T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/07/14/zero-shot-image-classification</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/zero-shot-image-classification-with-lancedb/cat.png?raw=true&quot; alt=&quot;cat-woah&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Imagine an AI having a conversation in a language it was never explicitly taught or suddenly playing a new game without any practice. In essence, if an AI can handle a task it hasn’t been directly trained for, that’s what we call zero-shot capability.&lt;/p&gt;

&lt;h3 id=&quot;zero-shot-classification&quot;&gt;Zero-Shot classification&lt;/h3&gt;

&lt;p&gt;There are many state-of-the-art (SOTA) computer vision models that excel at various classification tasks, such as identifying animals, cars, fraud, and products in e-commerce. They can handle almost any image classification job. However, these models are often specialized and need fine-tuning for different use cases to be truly effective.&lt;/p&gt;

&lt;p&gt;Fine-tuning can be challenging; it requires a well-labeled dataset, and if your use case is specific to an enterprise, it may also need significant computing power.&lt;/p&gt;

&lt;p&gt;So, what does “Zero-Shot image classification” really means? Imagine a deep learning model trained only to distinguish between cats and dogs. Now, if you show it a picture of a person lounging on the couch playing video games, and the model identifies it as a “corporate employee enjoying a Sunday afternoon,” that’s zero-shot image classification. It means the model can correctly identify something it was never specifically trained to recognize. To help you follow along, here is the complete architecture..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/zero-shot-image-classification-with-lancedb/zero-shot-image-classification.png?raw=true&quot; alt=&quot;architecture&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fundamentals&quot;&gt;Fundamentals&lt;/h3&gt;

&lt;p&gt;To make this work, we need a multimodal embedding model and a vector database. Let’s start with something called CLIP, which stands for &lt;strong&gt;Contrastive Language-Image Pre-Training.&lt;/strong&gt; Think of CLIP as a smart box that can understand different types of files. Whether you give it an image or text, it can grasp the context behind them all.&lt;/p&gt;

&lt;p&gt;But how it’s working behind the scenes? Consider there are two smaller boxes in that box: a &lt;strong&gt;Text Encoder&lt;/strong&gt; and an &lt;strong&gt;Image Encoder&lt;/strong&gt;. When OpenAI trained CLIP, they made sure these two encoders understand text and images in the same vector space.&lt;/p&gt;

&lt;p&gt;They achieved this by training the model to place similar image-text pairs close together in vector space while separating the vectors of non-pairs. Although OpenAI hasn’t specified the exact data used, the CLIP paper mentions that the model was trained on 400 million image-text pairs collected from the internet. This extensive training gives the model an impressive ability to understand relevant image-text pairs.&lt;/p&gt;

&lt;p&gt;So, here’s what we get from using CLIP:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Instead of datasets with specific class labels, CLIP only needs &lt;strong&gt;image-text pairs&lt;/strong&gt;, where the text describes the image.&lt;/li&gt;
  &lt;li&gt;Instead of training a CNN to get features from an image, CLIP uses more expressive text descriptions, which can provide additional features.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The authors of CLIP demonstrated its superior zero-shot classification performance by comparing it to the ResNet-101 model trained specifically on ImageNet. When both models were tested on other datasets derived from ImageNet, CLIP outperformed the state-of-the-art ResNet-101, showing a better understanding of the dataset than the fine-tuned version of ResNet-101 trained on ImageNet data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/zero-shot-image-classification-with-lancedb/comparison-matrix.png?raw=true&quot; alt=&quot;image-classification-matrix&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reasoning-of-clip&quot;&gt;Reasoning of CLIP&lt;/h3&gt;

&lt;p&gt;So, the implementation is quite straightforward. But before going into that, Let’s just quickly understand how a CNN works.&lt;/p&gt;

&lt;p&gt;Initially, each image in a traditional classification model has assigned class labels. We input these images into the model along with their respective class labels as the expected outputs. Through training, the model’s weights are adjusted based on calculated losses. Over time, the model learns to distinguish between various images by recognizing distinct features.&lt;/p&gt;

&lt;p&gt;However, zero-shot classification takes this concept further by utilizing two key components: a Text Encoder and an Image Encoder. Yes those two small boxes that I described earlier, Now these encoders produce n-dimensional vectors for both images and text, mapping them to the same vector space. This means the n-dimensional vector of an image of a “cat” would be semantically similar to the vector of a text description like “a photo of a cat”.&lt;/p&gt;

&lt;p&gt;By leveraging this shared vector space, zero-shot classification enables the model to classify images into categories it hasn’t explicitly seen during training. Instead of relying solely on predefined class labels, the model can compare the vector representation of a new image to vector representations of textual descriptions of various categories.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/zero-shot-image-classification-with-lancedb/same-vector-space.png?raw=true&quot; alt=&quot;same-vector-space.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To enhance the effectiveness of our zero-shot classification, we should transform our class labels from simple words like “cat,” “dog,” and “horse” into more descriptive phrases such as “a photo of a cat,” “a photo of a dog,” or “a photo of a horse.” This transformation is crucial because it mirrors the text-image pairs used during the model’s pretraining phase. OpenAI used prompts like &lt;code&gt;&quot;a photo of a {label}&quot;&lt;/code&gt; paired with each label to create these image-text pairs.&lt;a href=&quot;https://openai.com/index/clip/&quot;&gt;[1]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By adopting a similar approach, our classification task aligns more closely with the model’s pretrained understanding of how images relate to their textual descriptions.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;Let’s take a step back and solidify our understanding before implementation. The CLIP model is pre-trained on a massive dataset of image-text pairs, learning that “a photo of a cat” corresponds to an actual image of a cat, and vice versa. This means whenever we feed an image or text into CLIP, we can expect it to grasp the relevance between the two.&lt;/p&gt;

&lt;p&gt;Now, if you want to get into the nitty-gritty of the algorithm, it’s not overly complex. At its core, CLIP encodes each image and text as a n-dimensional embedding vector. Let’s say T1 is the vector for “a photo of a cat”, T2 for “a photo of a bird”, and T3 for “a photo of a horse”. If we have an image of a cat with embedding V1, the similarity score between V1 and T1 should be the highest among all text embeddings. This high similarity tells us that the V1 vector indeed represents “a photo of a cat”.&lt;/p&gt;

&lt;p&gt;So, when we pass an image of a cat to our CLIP model, it should reason like “this is a cat, I know this already”. Or if we input an image of bananas on a table, it might get the nerve and put up something like “I think this image shows bananas placed on a table”. Pretty cool, right?&lt;/p&gt;

&lt;p&gt;We’ve achieved our goal of classifying images without explicitly training a model on specific categories. And this is how CLIP does the heavy lifting for us, leveraging its pre-training to generalize to a wide range of concepts and enable zero-shot classification.&lt;/p&gt;

&lt;h3 id=&quot;using-lancedb&quot;&gt;Using LanceDB&lt;/h3&gt;

&lt;p&gt;To bring our zero-shot classification system to life, we need a robust Vector Database to store our label embeddings. The process is straightforward: we’ll transform our simple text labels like “cat” into more descriptive phrases such as “a photo of a cat”, fetch their CLIP embeddings, and store these in our database. When it comes time to classify a new image, we’ll retrieve its embedding from CLIP and perform a cosine similarity calculation against all our stored label embeddings in our DB. The label with the closest match becomes our predicted class.&lt;/p&gt;

&lt;p&gt;For this crucial task, I’ve opted for LanceDB, an impressive open-source vector database that’s like a super-smart data lake for managing complex information. LanceDB shines when we are handling complex data like our vector embeddings with an exceptional performance in fetching and storage, and the best part? It won’t cost you a dime.&lt;/p&gt;

&lt;p&gt;But LanceDB’s appeal goes beyond just being free and open-source. Its unparalleled scalability, efficient on-disk storage, and serverless capabilities make it a standout choice. These features are part of a broader trend of columnar databases that are rapidly transforming ML workflows. I’ve actually written an in-depth &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/03/15/embedded-databases&quot;&gt;article&lt;/a&gt; exploring the game-changing capabilities of these kind of databases. If you’re curious about how they’re revolutionizing the field, I highly recommend giving it a read!&lt;/p&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;With all the tools at our disposal, let’s move on to a practical example of using CLIP for zero-shot image classification with the LanceDB vector database. For this demonstration, I’ll use the  &lt;code&gt;uoft-cs/cifar100&lt;/code&gt; dataset from Hugging Face Datasets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from datasets import load_dataset

imagedata = load_dataset(
    &apos;uoft-cs/cifar100&apos;,
    split=&quot;test&quot;
)

imagedata
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s see original label names&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# labels names 
labels = imagedata.info.features[&apos;fine_label&apos;].names
print(len(labels))
labels
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;100

[&apos;apple&apos;,
 &apos;aquarium_fish&apos;,
 &apos;baby&apos;,
 &apos;bear&apos;,
 &apos;beaver&apos;,
 &apos;bed&apos;,
 &apos;bee&apos;,
 &apos;beetle&apos;,
 &apos;bicycle&apos;,
 &apos;bottle&apos;,
 &apos;bowl&apos;,
 &apos;boy&apos;,
 &apos;bridge&apos;,
 &apos;bus&apos;,
 &apos;butterfly&apos;,
 &apos;camel&apos;,
 &apos;can&apos;,
 &apos;castle&apos;,
 &apos;caterpillar&apos;,
 &apos;cattle&apos;,
 &apos;chair&apos;,
 &apos;chimpanzee&apos;,
 &apos;clock&apos;,
 &apos;cloud&apos;,
 &apos;cockroach&apos;,
...
 &apos;whale&apos;,
 &apos;willow_tree&apos;,
 &apos;wolf&apos;,
 &apos;woman&apos;,
 &apos;worm&apos;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks good! We have 100 classes to classify images from, which would require a lot of computing power if you go for traditional CNN. However, let’s proceed with our zero-shot image classification approach.&lt;/p&gt;

&lt;p&gt;Let’s generate the relevant textual descriptions for our labels&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# generate sentences
clip_labels = [f&quot;a photo of a {label}&quot; for label in labels]
clip_labels
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;[&apos;a photo of a apple&apos;,
 &apos;a photo of a aquarium_fish&apos;,
 &apos;a photo of a baby&apos;,
 &apos;a photo of a bear&apos;,
 &apos;a photo of a beaver&apos;,
 &apos;a photo of a bed&apos;,
 &apos;a photo of a bee&apos;,
 &apos;a photo of a beetle&apos;,
 &apos;a photo of a bicycle&apos;,
 &apos;a photo of a bottle&apos;,
 &apos;a photo of a bowl&apos;,
 &apos;a photo of a boy&apos;,
 &apos;a photo of a bridge&apos;,
 &apos;a photo of a bus&apos;,
 &apos;a photo of a butterfly&apos;,
 &apos;a photo of a camel&apos;,
 &apos;a photo of a can&apos;,
 &apos;a photo of a castle&apos;,
 &apos;a photo of a caterpillar&apos;,
 &apos;a photo of a cattle&apos;,
 &apos;a photo of a chair&apos;,
 &apos;a photo of a chimpanzee&apos;,
 &apos;a photo of a clock&apos;,
 &apos;a photo of a cloud&apos;,
 &apos;a photo of a cockroach&apos;,
...
 &apos;a photo of a whale&apos;,
 &apos;a photo of a willow_tree&apos;,
 &apos;a photo of a wolf&apos;,
 &apos;a photo of a woman&apos;,
 &apos;a photo of a worm&apos;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s initialize our CLIP embedding model, I will use the CLIP implementation from hugginface.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# initialization
from transformers import CLIPProcessor, CLIPModel

model_id = &quot;openai/clip-vit-large-patch14&quot;

processor = CLIPProcessor.from_pretrained(model_id)
model = CLIPModel.from_pretrained(model_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import torch

# if you have CUDA set it to the active device like this
device = &quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;
# move the model to the device
model.to(device)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’re new to Transformers, remember that computers understand numbers, not text. We’ll convert our text descriptions into integer representations called input IDs, where each number stands for a word or subword, more formally &lt;code&gt;tokens&lt;/code&gt;.  We’ll also need an attention mask to help the transformer focus on relevant parts of the input.&lt;/p&gt;

&lt;p&gt;For more details, you can read about transformers &lt;a href=&quot;https://huggingface.co/docs/transformers/en/index&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# create label tokens
label_tokens = processor(
    text=clip_labels,
    padding=True,
    return_tensors=&apos;pt&apos;
).to(device)

# Print the label tokens with the corresponding text 
for i in range(5):
    token_ids = label_tokens[&apos;input_ids&apos;][i]
    print(f&quot;Token ID : {token_ids}, Text : {processor.decode(token_ids, skip_special_tokens=False)}&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Token ID : tensor([49406,   320,  1125,   539,   320,  3055, 49407, 49407, 49407]), Text : &amp;lt;|startoftext|&amp;gt;a photo of a apple &amp;lt;|endoftext|&amp;gt;&amp;lt;|endoftext|&amp;gt;&amp;lt;|endoftext|&amp;gt;
Token ID : tensor([49406,   320,  1125,   539,   320, 16814,   318,  2759, 49407]), Text : &amp;lt;|startoftext|&amp;gt;a photo of a aquarium _ fish &amp;lt;|endoftext|&amp;gt;
Token ID : tensor([49406,   320,  1125,   539,   320,  1794, 49407, 49407, 49407]), Text : &amp;lt;|startoftext|&amp;gt;a photo of a baby &amp;lt;|endoftext|&amp;gt;&amp;lt;|endoftext|&amp;gt;&amp;lt;|endoftext|&amp;gt;
Token ID : tensor([49406,   320,  1125,   539,   320,  4298, 49407, 49407, 49407]), Text : &amp;lt;|startoftext|&amp;gt;a photo of a bear &amp;lt;|endoftext|&amp;gt;&amp;lt;|endoftext|&amp;gt;&amp;lt;|endoftext|&amp;gt;
Token ID : tensor([49406,   320,  1125,   539,   320, 22874, 49407, 49407, 49407]), Text : &amp;lt;|startoftext|&amp;gt;a photo of a beaver &amp;lt;|endoftext|&amp;gt;&amp;lt;|endoftext|&amp;gt;&amp;lt;|endoftext|&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s get our CLIP embeddings for our text labels&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# encode tokens to sentence embeddings from CLIP

with torch.no_grad():
    label_emb = model.get_text_features(**label_tokens) # passing the label text as in &quot;a photo of a cat&quot; to get it&apos;s relevant embedding from clip model

# Move embeddings to CPU and convert to numpy array
label_emb = label_emb.detach().cpu().numpy()
label_emb.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(100, 768)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a 768-dimensional vector for each of our 100 text class sentences. However, to improve our results when calculating similarities, we need to normalize these embeddings.&lt;/p&gt;

&lt;p&gt;Normalization helps ensure that all vectors are on the same scale, preventing longer vectors from dominating the similarity calculations simply due to their magnitude. We achieve this by dividing each vector by the square root of the sum of the squares of its elements. This process, known as L2 normalization, adjusts the length of our vectors while preserving their directional information, making our similarity comparisons more accurate and reliable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np

# normalization
label_emb = label_emb / np.linalg.norm(label_emb, axis=0)
label_emb.min(), label_emb.max()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, let’s see a random image from our dataset&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import random

index = random.randint(0, len(imagedata)-1)
selected_image = imagedata[index][&apos;img&apos;]
selected_image
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you execute this code, you’ll be presented with a visual representation of a data point from our dataset. In my case, the output displayed a pixelated image of a whale.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/zero-shot-image-classification-with-lancedb/whale.png?raw=true&quot; alt=&quot;whale&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we can analyze our image with CLIP, we need to preprocess it properly. First, we’ll run the image through our CLIP processor. This step ensures the image is resized first, then the pixels are normalized, then converting it into the tensor and finally adding a batch dimension. All of these things are settled up for the model.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;image = processor(
    text=None,
    images=imagedata[index][&apos;img&apos;],
    return_tensors=&apos;pt&apos;
)[&apos;pixel_values&apos;].to(device)
image.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;torch.Size([1, 3, 224, 224])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now here this shape represents a 4-dimensional tensor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1:&lt;/strong&gt; Batch size (1 image in this case)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;3:&lt;/strong&gt; Number of color channels (Red, Green, Blue)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;224:&lt;/strong&gt; Height of the image in pixels&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;224:&lt;/strong&gt; Width of the image in pixels&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, we have one image, with 3 color channels, and dimensions of 224x224 pixels. Now we’ll use CLIP to generate an embedding - a numerical representation of our image’s features. This embedding is what we’ll use for our classification task.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;img_emb = model.get_image_features(image)
img_emb.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;torch.Size([1, 768])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us 768 dimensional embedding to us, that’s our Image Embedding.  Only thing that is left for now is to use LanceDB to store our labels, with their corresponding embeddings and do the vector search for our Image Embedding on that database.. Here how it looks in the whole go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import lancedb
import numpy as np

data = []
for label_name, embedding in zip(labels, label_emb):
    data.append({&quot;label&quot;: label_name, &quot;vector&quot;: embedding})

db = lancedb.connect(&quot;./.lancedb&quot;)
table = db.create_table(&quot;zero_shot_table&quot;, data, mode=&quot;Overwrite&quot;)

# Prepare the query embedding
query_embedding = img_emb.squeeze().detach().cpu().numpy()
# Perform the search
results = (table.search(query_embedding)
           .limit(10)
           .to_pandas())

print(results.head(n=10))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;|   label         | vector | distance |
|-----------------|-----------------------------------------------------------|-------------|
| whale           | [0.05180167, 0.008572296, -0.00027403078, -0.12351207, ...]| 447.551605  |
| dolphin         | [0.09493398, 0.02598409, 0.0057568997, -0.13548125, ...]| 451.570709  |
| aquarium_fish   | [-0.094619915, 0.13643932, 0.030785343, 0.12217164, ...]| 451.694672  |
| skunk           | [0.1975818, -0.04034014, 0.023241673, 0.03933424, ...]| 452.987640  |
| crab            | [0.05123004, 0.0696855, 0.016390173, -0.02554354, ...]| 454.392456  |
| chimpanzee      | [0.04187969, 0.0196794, -0.038968336, 0.10017315, ...]| 454.870697  |
| ray             | [0.10485967, 0.023477506, 0.06709562, -0.08323726, ...]| 454.880524  |
| sea             | [-0.08117988, 0.059666794, 0.09419422, -0.18542227, ...]| 454.975311  |
| shark           | [-0.01027703, -0.06132377, 0.060097754, -0.2388756, ...]| 455.291901  |
| keyboard        | [-0.18453166, 0.05200073, 0.07468183, -0.08227961, ...]| 455.424866  |

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the results everyone: all set and confirmed. Our initial accurate prediction is a whale, demonstrating the closest resemblance between the label and the image with minimal distance, just as we had hoped. What’s truly remarkable is that we achieved this without running a single epoch for a CNN model. That’s zero shot classification for you fellas. Here is your &lt;a href=&quot;https://colab.research.google.com/github/lancedb/vectordb-recipes/blob/main/examples/zero-shot-image-classification/main.ipynb?ref=blog.lancedb.com&quot;&gt;colab&lt;/a&gt; for your reference. See you in next one.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Train a CNN classification model with Lance Dataset</title>
   <link href="http://localhost:4000/2024/06/26/train-a-cnn-with-lancedataset"/>
   <updated>2024-06-26T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/06/26/train-a-cnn-with-lancedataset</id>
   <content type="html">&lt;p&gt;In this &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/04/09/convert-any-image-dataset-to-lance&quot;&gt;previous&lt;/a&gt; post, I showed you how you can convert any Image Dataset to Lance format for faster retrieval and faster I/O operations. But can we use the same Lance formatted image dataset to train an image classification model? Well here it comes…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/train-a-cnn-with-lance-dataset/training_a_cnn.png?raw=true&quot; alt=&quot;front-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lance-format-saga-for-efficient-image-datasets&quot;&gt;Lance Format: Saga for efficient image datasets&lt;/h3&gt;

&lt;p&gt;CNNs are widely used for the image related tasks in AI world. They’re great at figuring out what’s in a picture, spotting objects, and even breaking down images into meaningful parts. What makes them so useful is how they can learn important visual clues on their own, without needing humans intervention.&lt;/p&gt;

&lt;p&gt;But when we’re dealing with massive image collections, just handling all that data can be a real headache. That’s where Lance file format comes in - it provides a clever new way to package up image data perfectly in the deep learning ecosystem for all our needs. The Lance format offers several key advantages that make it a powerful choice for machine learning applications, some of them are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Lance uses a compressed columnar format, offering efficient storage, fast data loading, and quick random access, making it ideal for large-scale image datasets.&lt;/li&gt;
  &lt;li&gt;It supports diverse data types, including images, and text facilitating the processing of different modalities in machine learning pipelines.&lt;/li&gt;
  &lt;li&gt;Lance stores data on disk, ensuring persistence through system failures and enhancing privacy and security by allowing local storage and access.&lt;/li&gt;
  &lt;li&gt;It provides high-performance random access, up to 100 times faster than Parquet.&lt;/li&gt;
  &lt;li&gt;Lance enables vector search, finding nearest neighbors in under 1 millisecond, and integrates OLAP queries with vector search.&lt;/li&gt;
  &lt;li&gt;It features zero-copy, automatic versioning, which manages data versions automatically and reduces redundancy.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;integrating-lance-and-convolutional-neural-networks&quot;&gt;Integrating Lance and Convolutional Neural Networks&lt;/h3&gt;

&lt;p&gt;If you’ve been working with Convolutional Neural Networks (CNNs) for image classification, you know that data loading and preprocessing can be a real headache. But what if I told you there’s a way to make this process smoother and faster? Enter the Lance format.&lt;/p&gt;

&lt;p&gt;In my previous post, I walked through the process of converting popular image datasets like &lt;a href=&quot;https://www.kaggle.com/datasets/vipulmaheshwarii/cinic-10-lance-dataset?ref=blog.lancedb.com&quot;&gt;cinic-10&lt;/a&gt; and &lt;a href=&quot;https://www.kaggle.com/datasets/vipulmaheshwarii/mini-imagenet-lance-dataset&quot;&gt;mini-imagenet&lt;/a&gt; to the Lance format. If you haven’t read that yet, I highly recommend you do so before continuing here. It’ll give you the foundation you need to fully appreciate what we’re about to dive into.&lt;/p&gt;

&lt;p&gt;Now, let’s take the next step: using Lance-formatted data to train a CNN for image classification. We’ll use the cinic-10 dataset as our example, but the principles apply to other datasets as well.&lt;/p&gt;

&lt;p&gt;Before we jump in, it’s important to understand how the Lance + PyTorch approach differs from the standard PyTorch method. Traditionally, PyTorch users rely on Torchvision’s ImageFolder to handle image and label loading. The Lance approach, however, requires us to create a custom dataset class. This class is designed to load binary-format images and their corresponding labels directly from the Lance dataset for creating the dataloaders.&lt;/p&gt;

&lt;p&gt;You might be wondering, “Is it worth the effort to switch?” The answer is a resounding yes, especially if you’re dealing with large datasets or need faster training times. Lance’s secret weapon is its lightning-fast random access capability. This means that Lance dataloaders can feed data to your CNN much quicker than standard PyTorch dataloaders, potentially shaving hours off your training time.&lt;/p&gt;

&lt;p&gt;In the following sections, we’ll dive into the details of implementing the Lance + PyTorch approach. By the end, you’ll have a powerful new tool in your deep learning toolkit that can significantly streamline your image classification workflows and reduce your model training time.&lt;/p&gt;

&lt;h3 id=&quot;load-the-lance-files-to-create-the-dataloaders&quot;&gt;Load the Lance files to create the dataloaders&lt;/h3&gt;

&lt;p&gt;Lance-formatted image data is stored in binary format, which isn’t directly usable by Convolutional Neural Networks (CNNs). We need to convert this data into a format CNNs can process, such as PIL Image objects. Here’s the process we’ll follow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Retrieve the binary image data: Extract the relevant image data from the Lance files.&lt;/li&gt;
  &lt;li&gt;Convert to PIL Image: Transform the binary data into a PIL Image object, creating a readable image format.&lt;/li&gt;
  &lt;li&gt;Handle grayscale images: Convert any grayscale images to RGB format for compatibility with CNNs that expect 3-channel color images.&lt;/li&gt;
  &lt;li&gt;Apply transformations: Use the provided transform function to apply necessary transformations like resizing or normalization.&lt;/li&gt;
  &lt;li&gt;Determine the labels: Look up the class index for each image’s label in the provided list of classes.&lt;/li&gt;
  &lt;li&gt;Return the data: Provide the transformed image and its corresponding label for CNN training.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To streamline this process, we’ll create a custom dataset class. This class will handle all these steps efficiently, preparing the Lance-formatted data for use with a CNN.&lt;/p&gt;

&lt;p&gt;This custom dataset class manages all the necessary steps to prepare our Lance-formatted data for use with a CNN model. It essentially iterates over the dataset to retrieve the relevant images and labels. By using this class, we can easily integrate the Lance data into your PyTorch-based training pipeline.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Define the image classes
classes = (&apos;airplane&apos;, &apos;automobile&apos;, &apos;bird&apos;, &apos;cat&apos;, &apos;deer&apos;, &apos;dog&apos;, &apos;frog&apos;, &apos;horse&apos;, &apos;ship&apos;, &apos;truck&apos;)

# transformation function 
transform_train = transforms.Compose([
    transforms.Resize((32, 32)),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
    transforms.Resize((32, 32)),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

transform_val = transforms.Compose([
    transforms.ToTensor(),
    transforms.Resize((32, 32)),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Define the custom dataset class
class CustomImageDataset(data.Dataset):
    def __init__(self, classes, lance_dataset, transform=None):
        self.classes = classes
        self.ds = lance.dataset(lance_dataset)
        self.transform = transform

    def __len__(self):
        return self.ds.count_rows()

    def __getitem__(self, idx):
        raw_data = self.ds.take([idx], columns=[&apos;image&apos;, &apos;label&apos;]).to_pydict()
        img_data, label = raw_data[&apos;image&apos;][0], raw_data[&apos;label&apos;][0]

        img = Image.open(io.BytesIO(img_data))

        # Convert grayscale images to RGB
        if img.mode != &apos;RGB&apos;:
            img = img.convert(&apos;RGB&apos;)

        if self.transform:
            img = self.transform(img)

        label = self.classes.index(label)
        return img, label
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our custom Dataset class set up, we’re ready to proceed with training our model using the Lance dataset.&lt;/p&gt;

&lt;h3 id=&quot;using-lance-dataset-with-cnns-putting-it-all-together&quot;&gt;Using Lance dataset with CNNs: Putting It All Together&lt;/h3&gt;

&lt;p&gt;Now that we’ve created our custom dataset class, integrating Lance dataset into our CNN training process becomes straightforward. Here’s how it all comes together:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Import the custom dataset class into our CNN script.&lt;/li&gt;
  &lt;li&gt;Load the lance dataset and create lance dataloaders.&lt;/li&gt;
  &lt;li&gt;Use the lance dataloaders instead of the standard dataloaders to train our model.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From this point, the process follows a standard CNN training workflow. For our example, I’ve chosen to use ResNet-34 as our CNN architecture to enhance accuracy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class Net(nn.Module):
    def __init__(self, num_classes):
        super(Net, self).__init__()
        self.resnet = models.resnet34(pretrained=True)
        num_ftrs = self.resnet.fc.in_features
        self.resnet.fc = nn.Linear(num_ftrs, num_classes)

    def forward(self, x):
        return self.resnet(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this setup, we can train a CNN on our Lance dataset using just a single script.&lt;/p&gt;

&lt;p&gt;One key advantage of using Lance-backed training is its performance. Compared to traditional methods, Lance-formatted data offers significant improvements in training speed. Here is the result when I compared the training time for 3 epochs with Lance vs Vanilla dataloaders&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/train-a-cnn-with-lance-dataset/epoch_duration.png?raw=true&quot; alt=&quot;epoch_duration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This shows an extensive improvement in training time for the Lance dataloaders as compared to the Vanilla ones.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/train-a-cnn-with-lance-dataset/shocking_cat.png?raw=true&quot; alt=&quot;shocking_cat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the complete &lt;a href=&quot;https://github.com/lancedb/lance-deeplearning-recipes/blob/main/community-examples/cnn-model-with-lance-dataset.ipynb&quot;&gt;notebook&lt;/a&gt; for the reference. For those wanting to explore further, there’s a &lt;a href=&quot;https://github.com/lancedb/lance-deeplearning-recipes&quot;&gt;repository&lt;/a&gt; showcasing various deep learning techniques that utilize Lance-formatted data. This resource can be valuable for expanding your understanding and application of Lance file format in different machine learning contexts.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Create a Movie Recommendation System using RAG and Genre Classification</title>
   <link href="http://localhost:4000/2024/05/31/movie-recommendation-system-with-rag-and-genre-classification"/>
   <updated>2024-05-31T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/05/31/movie-recommendation-system-with-rag-and-genre-classification</id>
   <content type="html">&lt;p&gt;This article provides a comprehensive guide on creating a movie recommendation system by using vector similarity search and multi-label genre classification.&lt;/p&gt;

&lt;p&gt;Here’s what we cover below:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Data ingestion and preprocessing techniques for movie metadata&lt;/li&gt;
  &lt;li&gt;Training a Doc2Vec model for Embeddings&lt;/li&gt;
  &lt;li&gt;Training a Neural network for genre classification task&lt;/li&gt;
  &lt;li&gt;Using Doc2Vec, LanceDB and the trained classifier get the relevant recommendations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h3 id=&quot;why-use-embeddings-for-recommendation-system&quot;&gt;Why use Embeddings for Recommendation System?&lt;/h3&gt;
&lt;p&gt;Scrolling through streaming platforms can be frustrating when the movie suggestions don’t match our interests. Building recommendation systems is a complex task, as there isn’t one metric that can measure the quality of recommendations. To improve this, we can combine embeddings and VectorDB for better recommendations.&lt;/p&gt;

&lt;p&gt;These embeddings serve dual purposes: they can either be directly used as input to a classification model for genre classification or stored in a VectorDB for retrieval purposes. By storing embeddings in a VectorDB, efficient retrieval and query search for recommendations become possible at a later stage.&lt;/p&gt;

&lt;p&gt;This architecture offers a holistic understanding of the underlying processes involved.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/movie-recommendation-using-rag/architecture_recommendation.png?raw=true&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;data-ingestion-and-preprocessing-techniques-for-movie-metadata&quot;&gt;Data Ingestion and preprocessing techniques for movie metadata&lt;/h3&gt;
&lt;p&gt;Our initial task involves gathering and organizing information about movies. This includes gathering extensive details such as the movie’s type, plot summary, genres, audience ratings, and more.&lt;/p&gt;

&lt;p&gt;Fortunately, we have access to a robust dataset on &lt;a href=&quot;https://www.kaggle.com/datasets/rounakbanik/the-movies-dataset?ref=blog.lancedb.com&quot;&gt;Kaggle&lt;/a&gt; containing information from various sources for approximately 45,000 movies. To follow along, please download the data from Kaggle and place it inside your working directory.&lt;/p&gt;

&lt;p&gt;if you require additional data, you can supplement the dataset by extracting information from platforms like Rotten Tomatoes, IMDb, or even box-office records.&lt;/p&gt;

&lt;p&gt;Our next step is to extract the core details from this dataset and generate a universal summary for each movie. Initially, I’ll combine the movie’s title, genres, and overviews into a single textual string. Then, this text will be tagged to create TaggedDocument instances, which will be utilized to train the Doc2Vec model later on.&lt;/p&gt;

&lt;p&gt;Before moving forward, let’s install the relevant libraries to make our life easier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;pip install torch scikit-learn pylance lancedb nltk gensim scipy==1.12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll proceed with the ingestion and preprocessing of the data. To simplify the process, we’ll work with chunks of 1000 movies at a time. For clarity, we’ll only include movie indices with non-null values for genres, accurate titles, and complete overviews. This approach ensures that we’re working with high-quality, relevant data for our analysis.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import torch
import pandas as pd
import numpy as np
from gensim.models.doc2vec import Doc2Vec, TaggedDocument
from nltk.tokenize import word_tokenize
from tqdm import tqdm

import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
from gensim.models.doc2vec import Doc2Vec, TaggedDocument
from nltk.tokenize import word_tokenize
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.model_selection import train_test_split
from tqdm import tqdm

import nltk
nltk.download(&apos;punkt&apos;)

# Read data from CSV file
movie_data = pd.read_csv(&apos;movies_metadata.csv&apos;, low_memory=False)
device = torch.device(&apos;cuda&apos; if torch.cuda.is_available() else &apos;cpu&apos;)

def preprocess_data(movie_data_chunk):
    tagged_docs = []
    valid_indices = []
    movie_info = []

    # Wrap your loop with tqdm
    for i, row in tqdm(movie_data_chunk.iterrows(), total=len(movie_data_chunk)):
        try:
            # Constructing movie text
            movies_text = &apos;&apos;
            genres = &apos;, &apos;.join([genre[&apos;name&apos;] for genre in eval(row[&apos;genres&apos;])])
            movies_text += &quot;Overview: &quot; + row[&apos;overview&apos;] + &apos;\n&apos;
            movies_text += &quot;Genres: &quot; + genres + &apos;\n&apos;
            movies_text += &quot;Title: &quot; + row[&apos;title&apos;] + &apos;\n&apos;
            tagged_docs.append(TaggedDocument(words=word_tokenize(movies_text.lower()), tags=[str(i)]))
            valid_indices.append(i)
            movie_info.append((row[&apos;title&apos;], genres))
        except Exception as e:
            continue

    return tagged_docs, valid_indices, movie_info
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;generating-embeddings-using-doc2vec&quot;&gt;Generating embeddings using Doc2Vec&lt;/h3&gt;

&lt;p&gt;Next, we’ll utilize the Doc2Vec model to generate embeddings for each movie based on the preprocessed text. We’ll allow the Doc2Vec model to train for several epochs to capture the essence of the various movies and their metadata in the multidimensional latent space. This process will help us represent each movie in a way that captures its unique characteristics and context.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def train_doc2vec_model(tagged_data, num_epochs=20):
    # Initialize Doc2Vec model
    doc2vec_model = Doc2Vec(vector_size=100, min_count=2, epochs=num_epochs)
    doc2vec_model.build_vocab(tqdm(tagged_data, desc=&quot;Building Vocabulary&quot;))
    for epoch in range(num_epochs):
        doc2vec_model.train(tqdm(tagged_data, desc=f&quot;Epoch {epoch+1}&quot;), total_examples=doc2vec_model.corpus_count, epochs=doc2vec_model.epochs)
    
    return doc2vec_model

# Preprocess data and extract genres for the first 1000 movies
chunk_size = 1000
tagged_data = []
valid_indices = []
movie_info = []
for chunk_start in range(0, len(movie_data), chunk_size):
    movie_data_chunk = movie_data.iloc[chunk_start:chunk_start+chunk_size]
    chunk_tagged_data, chunk_valid_indices, chunk_movie_info = preprocess_data(movie_data_chunk)
    tagged_data.extend(chunk_tagged_data)
    valid_indices.extend(chunk_valid_indices)
    movie_info.extend(chunk_movie_info)

doc2vec_model = train_doc2vec_model(tagged_data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;train_doc2vec_model&lt;/code&gt; function trains a Doc2Vec model on the tagged movie data, producing 100-dimensional embeddings for each movie. These embeddings act as input features for the neural network.&lt;/p&gt;

&lt;p&gt;With our current training setup, we are sure that movies with identical genres and similar kinds of overviews will be positioned closer to each other in the latent space, reflecting their thematic and content similarities.&lt;/p&gt;

&lt;h3 id=&quot;extracting-the-unique-genre-labels&quot;&gt;Extracting the unique genre labels&lt;/h3&gt;

&lt;p&gt;Next, our focus shifts to compiling the names of relevant movies along with their genres. Now won&lt;/p&gt;

&lt;p&gt;To illustrate this, Let’s consider a movie with three genres: ‘Drama’, ‘Comedy’, and ‘Horror’. Using the &lt;code&gt;MultiLabelBinarizer&lt;/code&gt;, we’ll represent these genres with lists of 0s and 1s. If a movie belongs to a particular genre, it will be assigned a 1; if it doesn’t, it will receive a 0. Now each row in our dataset will indicate which genres are associated with a specific movie. This approach simplifies the genre representation for easier analysis.&lt;/p&gt;

&lt;p&gt;Let’s take the movie “Top Gun Maverick” as a reference. We’ll associate its genres using binary encoding. Suppose this movie is categorized only under ‘drama’, not ‘comedy’ or ‘horror’. When we apply the MultiLabelBinarizer, the representation would be: Drama: 1, Comedy: 0, Horror: 0. This signifies that “Top Gun Maverick” is classified as a drama but not as a comedy or horror. We’ll replicate this process for all the movies in our dataset to identify the unique genre labels present in our data.&lt;/p&gt;

&lt;h3 id=&quot;training-a-neural-network-for-genre-classification-task&quot;&gt;Training a Neural Network for genre classification task&lt;/h3&gt;

&lt;p&gt;We’ll define a neural network consisting of four linear layers with ReLU activations. The final layer utilizes softmax activation to generate probability scores for various genres. If your objective is primarily classification within the genre spectrum, where you input a movie description to determine its relevant genres, you can establish a threshold value for the multi-label softmax output. This allows you to select the top ‘n’ genres with the highest probabilities.&lt;/p&gt;

&lt;p&gt;Here’s the neural network class, hyperparameter settings, and the corresponding training loop for training our model.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Extract genre labels for the valid indices
genres_list = []
for i in valid_indices:
    row = movie_data.loc[i]
    genres = [genre[&apos;name&apos;] for genre in eval(row[&apos;genres&apos;])]
    genres_list.append(genres)

mlb = MultiLabelBinarizer()
genre_labels = mlb.fit_transform(genres_list)

embeddings = []
for i in valid_indices:
    embeddings.append(doc2vec_model.dv[str(i)])

X_train, X_test, y_train, y_test = train_test_split(embeddings, genre_labels, test_size=0.2, random_state=42)

X_train_np = np.array(X_train, dtype=np.float32)
y_train_np = np.array(y_train, dtype=np.float32)
X_test_np = np.array(X_test, dtype=np.float32)
y_test_np = np.array(y_test, dtype=np.float32)

X_train_tensor = torch.tensor(X_train_np)
y_train_tensor = torch.tensor(y_train_np)
X_test_tensor = torch.tensor(X_test_np)
y_test_tensor = torch.tensor(y_test_np)

class GenreClassifier(nn.Module):
    def __init__(self, input_size, output_size):
        super(GenreClassifier, self).__init__()
        self.fc1 = nn.Linear(input_size, 512)
        self.bn1 = nn.BatchNorm1d(512)
        self.fc2 = nn.Linear(512, 256)
        self.bn2 = nn.BatchNorm1d(256)
        self.fc3 = nn.Linear(256, 128)
        self.bn3 = nn.BatchNorm1d(128)
        self.fc4 = nn.Linear(128, output_size)
        self.relu = nn.ReLU()
        self.dropout = nn.Dropout(p=0.2)  # Adjust the dropout rate as needed

    def forward(self, x):
        x = self.fc1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.dropout(x)
        x = self.fc2(x)
        x = self.bn2(x)
        x = self.relu(x)
        x = self.dropout(x)
        x = self.fc3(x)
        x = self.bn3(x)
        x = self.relu(x)
        x = self.dropout(x)
        x = self.fc4(x)
        return x

# Move model to the selected device
model = GenreClassifier(input_size=100, output_size=len(mlb.classes_)).to(device)

# Define loss function and optimizer
criterion = nn.BCEWithLogitsLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training loop
epochs = 50
batch_size = 64

train_dataset = TensorDataset(X_train_tensor.to(device), y_train_tensor.to(device))
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)

for epoch in range(epochs):
    model.train()
    running_loss = 0.0
    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)  # Move data to device
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item() * inputs.size(0)
    epoch_loss = running_loss / len(train_loader.dataset)
    print(f&apos;Epoch [{epoch + 1}/{epochs}], Loss: {epoch_loss:.4f}&apos;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! We’ve successfully trained a neural network for our genre classification task. Let’s test how our model is performing on the genre classification task.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from sklearn.metrics import f1_score

model.eval()
with torch.no_grad():
    X_test_tensor, y_test_tensor = X_test_tensor.to(device), y_test_tensor.to(device)  # Move test data to device
    outputs = model(X_test_tensor)
    test_loss = criterion(outputs, y_test_tensor)
    print(f&apos;Test Loss: {test_loss.item():.4f}&apos;)


thresholds = [0.1] * len(mlb.classes_)
thresholds_tensor = torch.tensor(thresholds, device=device).unsqueeze(0)

# Convert the outputs to binary predictions using varying thresholds
predicted_labels = (outputs &amp;gt; thresholds_tensor).cpu().numpy()

# Convert binary predictions and actual labels to multi-label format
predicted_multilabels = mlb.inverse_transform(predicted_labels)
actual_multilabels = mlb.inverse_transform(y_test_np)

# Print the Predicted and Actual Labels for each movie
for i, (predicted, actual) in enumerate(zip(predicted_multilabels, actual_multilabels)):
    print(f&apos;Movie {i+1}:&apos;)
    print(f&apos;    Predicted Labels: {predicted}&apos;)
    print(f&apos;    Actual Labels: {actual}&apos;)


# Compute F1-score
f1 = f1_score(y_test_np, predicted_labels, average=&apos;micro&apos;)
print(f&apos;F1-score: {f1:.4f}&apos;)

# Saving the trained model
torch.save(model.state_dict(), &apos;trained_model.pth&apos;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;a-movie-recommendation-system&quot;&gt;A movie recommendation system&lt;/h3&gt;

&lt;p&gt;To build a movie recommendation system, we’ll allow users to input a movie name, and based on that, we’ll return relevant recommendations. We’ll save our Doc2Vec embeddings in a vector database to achieve this. When a user inputs a query in the form of a new movie, we’ll first locate its embeddings in our vector database. Once we have this, we’ll find the ‘n’ number of movies whose embeddings are similar to our query movie. We can assess the similarity using various search algorithms like cosine similarity or finding the least Euclidean distance.&lt;/p&gt;

&lt;p&gt;We’ll organize the data and the embeddings into a CSV file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import lancedb
import numpy as np
import pandas as pd

data = []

for i in valid_indices:
    embedding = doc2vec_model.dv[str(i)]
    title, genres = movie_info[valid_indices.index(i)]
    data.append({&quot;title&quot;: title, &quot;genres&quot;: genres, &quot;vector&quot;: embedding.tolist()})

db = lancedb.connect(&quot;.db&quot;)
tbl = db.create_table(&quot;doc2vec_embeddings&quot;, data, mode=&quot;Overwrite&quot;)
db[&quot;doc2vec_embeddings&quot;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Essentially, we establish a connection to LanceDB, set up our table, and add our movie data to it.&lt;/p&gt;

&lt;p&gt;Each row in the table represents a single movie, with columns containing data like the title, genres, overview, and embeddings. For each movie title, we check if it exists in our dataset. If it does, we perform a cosine similarity search on all other movies and return the top 10 most relevant titles. This columnar format makes it easy to store and retrieve information for various tasks involving embeddings.&lt;/p&gt;

&lt;h3 id=&quot;using-doc2vec-embeddings-to-get-the-relevant-recommendations&quot;&gt;Using Doc2Vec Embeddings to get the relevant recommendations.&lt;/h3&gt;

&lt;p&gt;Our recommendation engine combines a neural network-based genre prediction model with a vector similarity search to provide relevant movie recommendations.&lt;/p&gt;

&lt;p&gt;For a given query movie, first, we use our trained neural network to predict its genres. Based on these predicted genres, we filter our movie database to include only those movies that share at least one genre with the query movie, achieved by constructing an appropriate SQL filter.&lt;/p&gt;

&lt;p&gt;We then perform a vector similarity search on this filtered subset to retrieve the most similar movies based on their vector representations. This approach ensures that the recommended movies are not only similar in terms of their vector characteristics but also share genre preferences with the query movie, resulting in more relevant and personalized recommendations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Function to get genres for a single movie query
def get_genres_for_query(model, query_embedding, mlb, thresholds, device):
    model.eval()
    with torch.no_grad():
        query_tensor = torch.tensor(query_embedding, dtype=torch.float32).unsqueeze(0).to(device)
        outputs = model(query_tensor)
        thresholds = [0.001] * len(mlb.classes_)
        thresold_tensor = torch.tensor(thresholds, device=device).unsqueeze(0)
        predicted_labels = (outputs &amp;gt;= thresold_tensor).cpu().numpy()
        predicted_multilabels = mlb.inverse_transform(predicted_labels)
        return predicted_multilabels


def movie_genre_prediction(movie_title):
    movie_index = movie_data.index[movie_data[&apos;title&apos;] == movie_title].tolist()[0]
    query_embedding = doc2vec_model.dv[str(movie_index)]
    predicted_genres = get_genres_for_query(model, query_embedding, mlb, [0.1] * len(mlb.classes_), device=device)
    return predicted_genres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, after all the groundwork, we’ve arrived at the final piece of the puzzle. Let’s generate some relevant recommendations using embeddings and LanceDB.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_recommendations(title):
    pd_data = pd.DataFrame(data)
    title_vector = pd_data[pd_data[&quot;title&quot;] == title][&quot;vector&quot;].values[0]
    predicted_genres = movie_genre_prediction(title)
    genres_movie = predicted_genres[0]  # Assuming predicted_genres is available

    genre_conditions = [f&quot;genres LIKE &apos;%{genre}%&apos;&quot; for genre in genres_movie]
    where_clause = &quot; OR &quot;.join(genre_conditions)

    result = (
        tbl.search(title_vector)
        .metric(&quot;cosine&quot;)
        .limit(10)
        .where(where_clause)
        .to_pandas()
    )
    return result[[&quot;title&quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_recommendations(&quot;Toy Story&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/movie-recommendation-using-rag/toy_story_recommendation.png?raw=true&quot; alt=&quot;movie_recommendation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some of the recommended movies are remarkably close matches. For example, when looking at “Toy Story,” which falls under “animation” and “family” movies, our recommendation system can find other movies in the similar genres.&lt;/p&gt;

&lt;p&gt;That being said, here is the &lt;a href=&quot;https://colab.research.google.com/drive/1ouQdHw26mqiMS8L6dFAsMSxycgpUj0R8?usp=sharing&amp;amp;ref=blog.lancedb.com&quot;&gt;colab&lt;/a&gt; link for the complete reference.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Convert any Image dataset to Lance</title>
   <link href="http://localhost:4000/2024/04/09/convert-any-image-dataset-to-lance"/>
   <updated>2024-04-09T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/04/09/convert-any-image-dataset-to-lance</id>
   <content type="html">&lt;p&gt;In our &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/03/29/effortlessly-loading-and-processing-images-with-lance-a-code-walkthrough&quot;&gt;previous&lt;/a&gt; article, we explored the remarkable capabilities of the Lance format, a modern, columnar data storage solution designed to revolutionize the way we work with large image datasets in machine learning. For the same purpose, I have converted the &lt;code&gt;cinic&lt;/code&gt; and &lt;code&gt;mini-imagenet&lt;/code&gt; datasets to their lance versions. For this write-up, I will use the example of &lt;code&gt;cinic&lt;/code&gt; dataset to explain how to convert any image dataset into the Lance format with a single script and  unlocking the full potential of this powerful technology.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/convert-any-image-dataset-to-lance/meme_reaction.png?raw=true&quot; alt=&quot;lance_converter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;just in case, here are the &lt;a href=&quot;https://www.kaggle.com/datasets/vipulmaheshwarii/cinic-10-lance-dataset&quot;&gt;cinic&lt;/a&gt; and &lt;a href=&quot;https://www.kaggle.com/datasets/vipulmaheshwarii/mini-imagenet-lance-dataset&quot;&gt;mini-imagenet&lt;/a&gt; datasets in lance.&lt;/p&gt;

&lt;h3 id=&quot;processing-images&quot;&gt;Processing Images&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;process_images&lt;/code&gt; function is the heart of our data conversion process. It is responsible for iterating over the image files in the specified dataset, reading the data of each image, and converting it into a PyArrow RecordBatch object on the binary scale. This function also extracts additional metadata, such as the filename, category, and data type (e.g., train, test, or validation), and stores it alongside the image data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def process_images(data_type):
    # Get the current directory path
    images_folder = os.path.join(&quot;cinic&quot;, data_type)

    # Define schema for RecordBatch
    schema = pa.schema([(&apos;image&apos;, pa.binary()), 
                        (&apos;filename&apos;, pa.string()), 
                        (&apos;category&apos;, pa.string()), 
                        (&apos;data_type&apos;, pa.string())])

    # Iterate over the categories within each data type
    for category in os.listdir(images_folder):
        category_folder = os.path.join(images_folder, category)
        
        # Iterate over the images within each category
        for filename in tqdm(os.listdir(category_folder), desc=f&quot;Processing {data_type} - {category}&quot;):
            # Construct the full path to the image
            image_path = os.path.join(category_folder, filename)

            # Read and convert the image to a binary format
            with open(image_path, &apos;rb&apos;) as f:
                binary_data = f.read()

            image_array = pa.array([binary_data], type=pa.binary())
            filename_array = pa.array([filename], type=pa.string())
            category_array = pa.array([category], type=pa.string())
            data_type_array = pa.array([data_type], type=pa.string())

            # Yield RecordBatch for each image
            yield pa.RecordBatch.from_arrays(
                [image_array, filename_array, category_array, data_type_array],
                schema=schema
            )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By leveraging the PyArrow library, the &lt;code&gt;process_images&lt;/code&gt; function ensures that the image data is represented in a format that is compatible with the Lance format. The use of &lt;code&gt;RecordBatch&lt;/code&gt; objects allows for efficient data structuring and enables seamless integration with the subsequent steps of the conversion process.&lt;/p&gt;

&lt;p&gt;One of the key features of this function is its ability to handle datasets with a hierarchical structure. It iterates over the categories within each data type, ensuring that the metadata associated with each image is accurately captured and preserved. This attention to detail is crucial, as it allows us to maintain the rich contextual information of us image dataset, which can be invaluable for tasks like classification, object detection, or semantic segmentation.&lt;/p&gt;

&lt;h3 id=&quot;writing-to-lance&quot;&gt;Writing to Lance&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;write_to_lance&lt;/code&gt; function takes the data generated by the &lt;code&gt;process_images&lt;/code&gt; function and writes it to Lance datasets, one for each data type (e.g., train, test, validation). This step is where the true power of the Lance format is unleashed.&lt;/p&gt;

&lt;p&gt;The function first creates a PyArrow schema that defines the structure of the data to be stored in the Lance format. This schema includes the image data, as well as the associated metadata (filename, category, and data type). By specifying the schema upfront, the script ensures that the data is stored in a consistent and organized manner, making it easier to retrieve and work with in the future.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def write_to_lance():
    # Create an empty RecordBatchIterator
    schema = pa.schema([
        pa.field(&quot;image&quot;, pa.binary()),
        pa.field(&quot;filename&quot;, pa.string()),
        pa.field(&quot;category&quot;, pa.string()),
        pa.field(&quot;data_type&quot;, pa.string())
    ])

    # Specify the path where you want to save the Lance files
    images_folder = &quot;cinic&quot;
    
    for data_type in [&apos;train&apos;, &apos;test&apos;, &apos;val&apos;]:
        lance_file_path = os.path.join(images_folder, f&quot;cinic_{data_type}.lance&quot;)
        
        reader = pa.RecordBatchReader.from_batches(schema, process_images(data_type))
        lance.write_dataset(
            reader,
            lance_file_path,
            schema,
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, the function iterates through the different data types, creating a Lance dataset file for each one. The &lt;code&gt;lance.write_dataset&lt;/code&gt; function is then used to write the &lt;code&gt;RecordBatchReader&lt;/code&gt;, generated from the &lt;code&gt;process_images&lt;/code&gt; function, to the respective Lance dataset files.&lt;/p&gt;

&lt;p&gt;The benefits of this approach are numerous. By storing the data in the Lance format, you can take advantage of its columnar storage and compression techniques, resulting in significantly reduced storage requirements. Additionally, the optimized data layout and indexing capabilities of Lance enable lightning-fast data loading times, improving the overall performance and responsiveness of your machine learning pipelines.&lt;/p&gt;

&lt;h3 id=&quot;loading-into-pandas&quot;&gt;Loading into Pandas&lt;/h3&gt;

&lt;p&gt;The final step in the process is to load the data from the Lance datasets into Pandas DataFrames, making the image data easily accessible for further processing and analysis in your machine learning workflows.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;loading_into_pandas&lt;/code&gt; function demonstrates this process. It first locates the Lance dataset files, created in the previous step, and creates a Lance dataset object for each data type. The function then iterates over the batches of data, converting them into Pandas DataFrames and concatenating them into a single DataFrame for each data type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
def loading_into_pandas():
    # Load Lance files from the same folder
    current_dir = os.getcwd()
    images_folder = os.path.join(current_dir, &quot;cinic&quot;)
    
    data_frames = {}  # Dictionary to store DataFrames for each data type
    
    for data_type in [&apos;test&apos;, &apos;train&apos;, &apos;val&apos;]:
        uri = os.path.join(images_folder, f&quot;cinic_{data_type}.lance&quot;)

        ds = lance.dataset(uri)

        # Accumulate data from batches into a list
        data = []
        for batch in tqdm(ds.to_batches(columns=[&quot;image&quot;, &quot;filename&quot;, &quot;category&quot;, &quot;data_type&quot;], batch_size=10), desc=f&quot;Loading {data_type} batches&quot;):
            tbl = batch.to_pandas()
            data.append(tbl)

        # Concatenate all DataFrames into a single DataFrame
        df = pd.concat(data, ignore_index=True)
        
        # Store the DataFrame in the dictionary
        data_frames[data_type] = df
        
        print(f&quot;Pandas DataFrame for {data_type} is ready&quot;)
        print(&quot;Total Rows: &quot;, df.shape[0])
    
    return data_frames
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach offers several advantages. By loading the data in batches, the function can efficiently handle large-scale image datasets without running into memory constraints. Additionally, the use of Pandas DataFrames provides a familiar and intuitive interface for working with the data, allowing you to leverage the rich ecosystem of Pandas-compatible libraries and tools for data manipulation, visualization, and analysis.&lt;/p&gt;

&lt;p&gt;Moreover, the function stores the DataFrames in a list, indexed by the data type. This structure enables us to easily access the specific subsets of your dataset (e.g., train, test, validation) as needed, further streamlining your machine learning workflows. I mean it’s too smooth guys.&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting It All Together&lt;/h3&gt;
&lt;p&gt;By running the provided script, you can convert your image datasets, whether they are industry-standard benchmarks or your own custom collections, into the powerful Lance format. This transformation unlocks a new level of efficiency and performance, empowering you to supercharge your machine learning projects.  I have used the same script for the &lt;code&gt;mini-imagenet&lt;/code&gt; too, make sure your data directory looks like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/convert-any-image-dataset-to-lance/cinic_image.png?raw=true&quot; alt=&quot;data_folders&quot; /&gt;&lt;/p&gt;

&lt;p&gt;here is the complete script for your reference..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import os
import pandas as pd
import pyarrow as pa
import lance
import time
from tqdm import tqdm

def process_images(data_type):
    # Get the current directory path
    images_folder = os.path.join(&quot;cinic&quot;, data_type)

    # Define schema for RecordBatch
    schema = pa.schema([(&apos;image&apos;, pa.binary()), 
                        (&apos;filename&apos;, pa.string()), 
                        (&apos;category&apos;, pa.string()), 
                        (&apos;data_type&apos;, pa.string())])

    # Iterate over the categories within each data type
    for category in os.listdir(images_folder):
        category_folder = os.path.join(images_folder, category)
        
        # Iterate over the images within each category
        for filename in tqdm(os.listdir(category_folder), desc=f&quot;Processing {data_type} - {category}&quot;):
            # Construct the full path to the image
            image_path = os.path.join(category_folder, filename)

            # Read and convert the image to a binary format
            with open(image_path, &apos;rb&apos;) as f:
                binary_data = f.read()

            image_array = pa.array([binary_data], type=pa.binary())
            filename_array = pa.array([filename], type=pa.string())
            category_array = pa.array([category], type=pa.string())
            data_type_array = pa.array([data_type], type=pa.string())

            # Yield RecordBatch for each image
            yield pa.RecordBatch.from_arrays(
                [image_array, filename_array, category_array, data_type_array],
                schema=schema
            )

# Function to write PyArrow Table to Lance dataset
def write_to_lance():
    # Create an empty RecordBatchIterator
    schema = pa.schema([
        pa.field(&quot;image&quot;, pa.binary()),
        pa.field(&quot;filename&quot;, pa.string()),
        pa.field(&quot;category&quot;, pa.string()),
        pa.field(&quot;data_type&quot;, pa.string())
    ])

    # Specify the path where you want to save the Lance files
    images_folder = &quot;cinic&quot;
    
    for data_type in [&apos;train&apos;, &apos;test&apos;, &apos;val&apos;]:
        lance_file_path = os.path.join(images_folder, f&quot;cinic_{data_type}.lance&quot;)
        
        reader = pa.RecordBatchReader.from_batches(schema, process_images(data_type))
        lance.write_dataset(
            reader,
            lance_file_path,
            schema,
        )

def loading_into_pandas():
    # Load Lance files from the same folder
    current_dir = os.getcwd()
    print(current_dir)
    images_folder = os.path.join(current_dir, &quot;cinic&quot;)
    
    data_frames = {}  # Dictionary to store DataFrames for each data type
    
    for data_type in [&apos;test&apos;, &apos;train&apos;, &apos;val&apos;]:
        uri = os.path.join(images_folder, f&quot;cinic_{data_type}.lance&quot;)

        ds = lance.dataset(uri)

        # Accumulate data from batches into a list
        data = []
        for batch in tqdm(ds.to_batches(columns=[&quot;image&quot;, &quot;filename&quot;, &quot;category&quot;, &quot;data_type&quot;], batch_size=10), desc=f&quot;Loading {data_type} batches&quot;):
            tbl = batch.to_pandas()
            data.append(tbl)

        # Concatenate all DataFrames into a single DataFrame
        df = pd.concat(data, ignore_index=True)
        
        # Store the DataFrame in the dictionary
        data_frames[data_type] = df
        
        print(f&quot;Pandas DataFrame for {data_type} is ready&quot;)
        print(&quot;Total Rows: &quot;, df.shape[0])
    
    return data_frames


if __name__ == &quot;__main__&quot;:
    start = time.time()
    write_to_lance()
    data_frames = loading_into_pandas()
    end = time.time()
    print(f&quot;Time(sec): {end - start}&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take the different splits of the train, test and validation through different dataframes and utilize the information for your next image classifcation task&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;train = data_frames[&apos;train&apos;]
test = data_frames[&apos;test&apos;]
val = data_frames[&apos;val&apos;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this is how the training dataframe looks like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;train.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;image	filename	category	data_type
	image	filename	category	data_type
0	b&apos;\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\...	n02130308_1836.png	cat	train
1	b&apos;\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\...	cifar10-train-21103.png	cat	train
2	b&apos;\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\...	cifar10-train-44957.png	cat	train
3	b&apos;\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\...	n02129604_14997.png	cat	train
4	b&apos;\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\...	n02123045_1463.png	cat	train
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The benefits of this approach are numerous:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Storage Efficiency: The columnar storage and compression techniques employed by Lance result in significantly reduced storage requirements, making it an ideal choice for handling large-scale image datasets.&lt;/li&gt;
  &lt;li&gt;Fast Data Loading: The optimized data layout and indexing capabilities of Lance enable lightning-fast data loading times, improving the overall performance and responsiveness of your machine learning pipelines.&lt;/li&gt;
  &lt;li&gt;Random Access: The ability to selectively load specific data subsets from the Lance dataset allows for efficient data augmentation techniques and custom data loading strategies tailored to your unique requirements.&lt;/li&gt;
  &lt;li&gt;Unified Data Format: Lance can store diverse data types, such as images, text, and numerical data, in a single, streamlined format. This flexibility is invaluable in machine learning, where different modalities of data often need to be processed together.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By adopting the Lance format, we can literally elevate our machine learning workflow to new heights, unlocking unprecedented levels of efficiency, performance, and flexibility. Take the first step by running the provided script and converting your image datasets to the Lance format – the future of machine learning data management is awaiting for you, who knows if you find your second love with lance format.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Effortlessly Loading and Processing Images with Lance</title>
   <link href="http://localhost:4000/2024/03/29/effortlessly-loading-and-processing-images-with-lance-a-code-walkthrough"/>
   <updated>2024-03-29T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/03/29/effortlessly-loading-and-processing-images-with-lance-a-code-walkthrough</id>
   <content type="html">&lt;p&gt;Working with large image datasets in machine learning can be challenging, often requiring significant computational resources and efficient data-handling techniques. While widely used for image storage, traditional file formats like JPEG or PNG are not optimized for efficient data loading and processing in Machine learning workflows. This is where the Lance format shines, offering a modern, columnar data storage solution designed specifically for machine learning applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/loading_and_processing_image_with_lance/image.png?raw=true&quot; alt=&quot;meme_for_ml_workloads&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Lance format stores data in a compressed columnar format, enabling efficient storage, fast data loading, and fast random access to data subsets. Additionally, the Lance format is maintained on disk, which provides a couple of advantages: It will persist through a system failure and doesn’t rely on keeping everything in memory, which can run out. This also lends itself to enhanced data privacy and security, as the data doesn’t need to be transferred over a network.&lt;/p&gt;

&lt;p&gt;One of the other key advantages of the Lance format is its ability to store diverse data types, such as images, text, and numerical data, in a unified format. Imagine having a data lake where each kind of data can be stored seamlessly without separating underlying data types. This flexibility is particularly valuable in machine learning pipelines, where different data types often need to be processed together. This unparalleled flexibility is a game-changer in machine learning pipelines, where different modalities of data often need to be processed together for tasks like multimodal learning, audio-visual analysis, or natural language processing with visual inputs.&lt;/p&gt;

&lt;p&gt;With Lance, you can effortlessly consider all kinds of data, from images to videos and audio files to text data and numerical values, all within the same columnar storage format. This means you can have a single, streamlined data pipeline that can handle any combination of data types without the need for complex data transformations or conversions. Lance easily handles it without worrying about compatibility issues or dealing with separate storage formats for different data types. And the best part? You can store and retrieve all these diverse data types within the same column.&lt;/p&gt;

&lt;p&gt;In contrast, while efficient for tabular data, traditional formats like Parquet may need to handle diverse data types better. By converting all data into a single, unified format using Lance, you can retrieve and process any type of data without dealing with multiple formats or complex data structures.
In this article, I’ll walk through a Python code example that demonstrates how to convert a dataset of GTA5 images into the Lance format and subsequently load them into a Pandas DataFrame for further processing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import os
import pandas as pd
import pyarrow as pa
import lance
import time
from tqdm import tqdm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We start by importing the necessary libraries, including os for directory handling, pandas for data manipulation, pyarrow for working with Arrow data formats, lance for interacting with the Lance format, and tqdm for displaying progress bars.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def process_images():
    current_dir = os.getcwd()
    images_folder = os.path.join(current_dir, &quot;./image&quot;)

    # Define schema for RecordBatch
    schema = pa.schema([(&apos;image&apos;, pa.binary())])

    image_files = [filename for filename in os.listdir(images_folder)
                if filename.endswith((&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;))]

    # Iterate over all images in the folder with tqdm
    for filename in tqdm(image_files, desc=&quot;Processing Images&quot;):
        # Construct the full path to the image
        image_path = os.path.join(images_folder, filename)

        # Read and convert the image to a binary format
        with open(image_path, &apos;rb&apos;) as f:
            binary_data = f.read()

        image_array = pa.array([binary_data], type=pa.binary())

        # Yield RecordBatch for each image
        yield pa.RecordBatch.from_arrays([image_array], schema=schema)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The process_images function is responsible for iterating over all image files in a specified directory and converting them into PyArrow RecordBatch objects. It first defines the schema for the RecordBatch, specifying that each batch will contain a single binary column named ‘image’.&lt;/p&gt;

&lt;p&gt;It then iterates over all image files in the directory, reads each image’s binary data, and yields a RecordBatch containing that image’s binary data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def write_to_lance():
    schema = pa.schema([
        pa.field(&quot;image&quot;, pa.binary())
    ])

    reader = pa.RecordBatchReader.from_batches(schema, process_images())
    lance.write_dataset(
        reader,
        &quot;image_dataset.lance&quot;,
        schema,
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The write_to_lance function creates a RecordBatchReader from the process_images generator and writes the resulting data to a Lance dataset named “image_dataset.lance”. This step converts the image data into the efficient, columnar Lance format, optimizing it for fast data loading and random access.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def loading_into_pandas():
    uri = &quot;image_dataset.lance&quot;
    ds = lance.dataset(uri)

    # Accumulate data from batches into a list
    data = []
    for batch in ds.to_batches(columns=[&quot;image&quot;], batch_size=10):
        tbl = batch.to_pandas()
        data.append(tbl)

    # Concatenate all DataFrames into a single DataFrame
    df = pd.concat(data, ignore_index=True)
    print(&quot;Pandas DataFrame is ready&quot;)
    print(&quot;Total Rows: &quot;, df.shape[0])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loading_into_pandas function demonstrates how to load the image data from the Lance dataset into a Pandas DataFrame. It first creates a Lance dataset object from the “image_dataset.lance” file. Then, it iterates over batches of data, converting each batch into a Pandas DataFrame and appending it to a list. Finally, it concatenates all the DataFrames in the list into a single DataFrame, making the image data accessible for further processing or analysis.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    start = time.time()
    write_to_lance()
    loading_into_pandas()
    end = time.time()
    print(f&quot;Time(sec): {end - start}&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The central part of the script calls the write_to_lance and loading_into_pandas functions, measuring the total execution time for the entire process.
By leveraging the Lance format, this code demonstrates how to efficiently store and load large image datasets for machine learning applications. The columnar storage and compression techniques Lance uses result in reduced storage requirements and faster data loading times, making it an ideal choice for working with large-scale image data.&lt;/p&gt;

&lt;p&gt;Moreover, the random access capabilities of Lance allow for selective loading of specific data subsets, enabling efficient data augmentation techniques and custom data loading strategies tailored to your machine learning workflow.&lt;/p&gt;

&lt;p&gt;TLDR: Lance format provides a powerful and efficient solution for handling multimodal data in machine learning pipelines, streamlining data storage, loading, and processing tasks. By adopting Lance, we can improve our machine learning projects’ overall performance and resource efficiency while also benefiting from the ability to store diverse data types in a unified format and maintain data locality and privacy. Here is the whole script for your reference.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import os
import pandas as pd
import pyarrow as pa
import lance
import time
from tqdm import tqdm

def process_images():
    current_dir = os.getcwd()
    images_folder = os.path.join(current_dir, &quot;./image&quot;)

    # Define schema for RecordBatch
    schema = pa.schema([(&apos;image&apos;, pa.binary())])

    image_files = [filename for filename in os.listdir(images_folder)
                if filename.endswith((&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;))]

    # Iterate over all images in the folder with tqdm
    for filename in tqdm(image_files, desc=&quot;Processing Images&quot;):
        # Construct the full path to the image
        image_path = os.path.join(images_folder, filename)

        # Read and convert the image to a binary format
        with open(image_path, &apos;rb&apos;) as f:
            binary_data = f.read()

        image_array = pa.array([binary_data], type=pa.binary())

        # Yield RecordBatch for each image
        yield pa.RecordBatch.from_arrays([image_array], schema=schema)

def write_to_lance():
    
    schema = pa.schema([
        pa.field(&quot;image&quot;, pa.binary())
    ])

    reader = pa.RecordBatchReader.from_batches(schema, process_images())
    lance.write_dataset(
        reader,
        &quot;image_dataset.lance&quot;,
        schema,
    )

def loading_into_pandas():

    uri = &quot;image_dataset.lance&quot;
    ds = lance.dataset(uri)

    # Accumulate data from batches into a list
    data = []
    for batch in ds.to_batches(columns=[&quot;image&quot;], batch_size=10):
        tbl = batch.to_pandas()
        data.append(tbl)

    # Concatenate all DataFrames into a single DataFrame
    df = pd.concat(data, ignore_index=True)
    print(&quot;Pandas DataFrame is ready&quot;)
    print(&quot;Total Rows: &quot;, df.shape[0])


if __name__ == &quot;__main__&quot;:
    start = time.time()
    write_to_lance()
    loading_into_pandas()
    end = time.time()
    print(f&quot;Time(sec): {end - start}&quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Imagine using Lance-formatted image data to make machine learning and deep learning projects faster. Something big is coming up, stay tuned.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Databases for ML Worflows</title>
   <link href="http://localhost:4000/2024/03/15/embedded-databases"/>
   <updated>2024-03-15T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/03/15/embedded-databases</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/embedded_databases/production_fucked.png?raw=true&quot; alt=&quot;production_fucked&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In today’s world, when everyone’s curious about trying out generative AI tools and how they work, you’ve probably heard about embedded databases. Most of us tend to think about client-server based setups when databases come to mind. And honestly, that’s somewhat accurate.&lt;/p&gt;

&lt;p&gt;However, client-server architectures aren’t really built to handle heavy analytical and ML workloads. Essentially, the processing tasks fall into two main categories: OLTP (online transactional processing) and OLAP (online analytical processing). So, when you’re changing your Instagram profile picture or uploading a photo on Facebook, you’re essentially involved in OLTP tasks, which focus on quick and easy processing. On the flip side, when we deal with OLAP, it’s all about handling complex computations such as retrieving queries from extensive datasets, combining tables, and aggregating data for big data purposes. Now, we need something that can handle our large ML workloads effectively and perform optimally across datasets ranging from small to large scales.&lt;/p&gt;

&lt;h3 id=&quot;columnar-oriented-datastores&quot;&gt;Columnar Oriented Datastores&lt;/h3&gt;

&lt;p&gt;Hard drives store data in terms of blocks, so whenever an operation is performed, the entire block containing the data is loaded into memory for reading by the OS. Now, Row-oriented databases aim to store whole rows of the database in the same block, whereas columnar databases store column entries in the same block.&lt;/p&gt;

&lt;p&gt;This implies that when you need to perform column-oriented operations like updating columns, aggregations, or selecting a column entry, column-oriented databases outperform row-oriented ones in terms of speed. However, if you need to add a new data point entry with multiple columns, then row-oriented databases perform better.&lt;/p&gt;

&lt;p&gt;Now, the point is, there’s something called Apache Arrow, which is a language-agnostic columnar memory format for flat and hierarchical data, organized for efficient analytic operations on modern hardware like CPUs and GPUs.&lt;/p&gt;

&lt;p&gt;This is too technical. Let me break it down for you. Machine learning is all about feeding huge amounts of data into complex mathematical models to find patterns and make predictions, right? Now, Apache Arrow turbocharges this process by providing a standardized way to store and work with data that’s &lt;a href=&quot;https://developer.nvidia.com/blog/accelerating-apache-spark-3-0-with-gpus-and-rapids/&quot;&gt;optimized&lt;/a&gt; for modern hardware like powerful GPUs. So Instead of dealing with clunky row-based formats, Arrow’s columnar layout lets you focus on the specific data features you need, drastically cutting down processing time. And since Arrow keeps data in memory, AKA RAM, rather than on sluggish disk storage like hard drives or SSDs, your models can crunch through datasets at blistering speeds. The end result? You can iterate faster, train better models, and stay ahead of the competition.&lt;/p&gt;

&lt;p&gt;Still confused, right? I was too. Well, let’s take an example. If you’re building a model to predict housing prices based on factors like square footage, number of bedrooms, location, etc., Arrow’s columnar format would allow you to easily isolate and work with just the columns containing those specific features, ignoring any other irrelevant data columns. This focused, selective data access is more efficient than dealing with row-based formats where you’d have to sort through all the data indiscriminately.&lt;/p&gt;

&lt;p&gt;Now that’s where the power of Arrow based columnar databases comes into play.&lt;/p&gt;

&lt;h3 id=&quot;lance-data-format&quot;&gt;Lance Data Format&lt;/h3&gt;

&lt;p&gt;Building on the advantages of Apache Arrow’s columnar, in-memory approach for machine learning, there’s another game-changing data format that takes things to a whole new level – the Lance Data Format.&lt;/p&gt;

&lt;p&gt;Designed from the ground up with modern ML workflows in mind, Lance is an absolute speed demon when it comes to querying and prepping data for training models. But it’s not just about raw speed – Lance has some seriously impressive versatility under the hood.&lt;/p&gt;

&lt;p&gt;Unlike formats limited to tabular data, Lance can handle all kinds of data types like images, videos, 3D point clouds, audio, and more. It’s like a Swiss Army knife of data formats for ML. Btw, Don’t just take my word for it because I love LanceDB, instead – &lt;a href=&quot;https://blog.lancedb.com/announcing-lancedb-5cb0deaa46ee-2/&quot;&gt;benchmarks&lt;/a&gt; have shown that Lance can provide random data access involving read and write operation a mind-boggling approximately 1000 times faster than Parquet, another popular columnar format. This blistering speed comes from unique storage memory layout used by Lance.&lt;/p&gt;

&lt;p&gt;The other important thing LanceDB provides is the usage of Zero-copy versioning, essentially it means that when you create a new version of your data, LanceDB doesn’t have to make an entire copy – it just stores the changes efficiently. This saves a ton of time and storage space compared to traditional versioning methods. And optimized vector operations allow Lance to process data in bulk, taking full advantage of modern hardware like GPUs and vectorized CPUs. It’s all part of Lance’s cloud-native design.&lt;/p&gt;

&lt;h3 id=&quot;in-process&quot;&gt;In-process&lt;/h3&gt;

&lt;p&gt;Before understanding what Embedded Systems really do, First, we need to understand what a database management system (DBMS) is in Layman. Now in simple terms a DBMS is a software system that allows you to create, manage, and interact with databases (obviously duhh). I mean It provides a way to store, retrieve, and manipulate data in an organized and more efficient manner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/embedded_databases/in_process_setting.png?raw=true&quot; alt=&quot;inprocess_setting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, an embedded database is a type of DBMS that is tightly integrated with the application layer. This means that the database that you are working with is not a separate process or service running on its own; instead, it runs within the same process as the application itself.&lt;/p&gt;

&lt;p&gt;This tight integration makes it easier for the application to interact with the database, as there’s no need for inter-process communication or network communication unlike traditional client-server database systems where the database is a  separate process or a service&lt;/p&gt;

&lt;p&gt;This type of thing is called “in-process”. Remember this for the rest of your life. It might be the most important thing to remember when judging the other embedded databases out there.&lt;/p&gt;

&lt;p&gt;In simple terms, the application can directly access and manipulate the database without going through additional layers or protocols. CUTTING THE BS.&lt;/p&gt;

&lt;h3 id=&quot;on-disk-storage&quot;&gt;&lt;strong&gt;On-disk storage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Remember I said earlier that Embedded systems have this ability to store the data in-memory and work at blistering speeds. While embedded databases can store data in memory, they also have this capability to store larger datasets on disk. This allows them to scale to large amounts of data (terabytes or billion dataset points, think of embeddings of billion tokens) while still providing relatively low query latencies and response times. So it’s like the best of the both worlds.&lt;/p&gt;

&lt;h3 id=&quot;serverless&quot;&gt;Serverless&lt;/h3&gt;

&lt;p&gt;Ok new term! Sometimes the terms “Embedded” and “Serverless” are sometimes used interchangeably in the database community, but they actually refer to different concepts. “Embedded” refers to the database being tightly integrated with the application as we seen earlier in case of Embedded databases while Serverless refers to the separation of storage and compute resources, and it’s often used in the context of microservices architectures.&lt;/p&gt;

&lt;p&gt;To make it more concise, think of the serverless database as it’s composed of two different containers, the storage layer (where the data is stored) and the compute layer (where the data is processed). Now this separation allows the compute resources to be dynamically allocated and scaled up or down based on the workload.&lt;/p&gt;

&lt;p&gt;And btw, when we are talking about the Serverless model, it is often associated with the cloud based services, where you don’t have to manage the underlying infra..&lt;/p&gt;

&lt;h3 id=&quot;scalability&quot;&gt;Scalability&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/embedded_databases/lancedb_scaled.png?raw=true&quot; alt=&quot;lancedb_scaled&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok so you decided to work on the simple RAG system and wanted to test it out or just maybe play with it and came up with the various vector databases, you did your experiment,  you are happy and done. Now when you got serious and came up with something and wanted to scale your RAG system for let’s say 1 billion embeddings, you open up your earlier setup, ingested more data, created more embeddings and when the time came, your traditional embedding database gave you nightmares in terms of the latency as well as stability.&lt;/p&gt;

&lt;p&gt;Now, Think of an open-source embedding database designed to seamlessly handle a variety of setups and effortlessly scales up to billions of vectors locally., scales up to billions of embeddings, fetch the relevant embeddings with amazing searching capabilities and data never leaves your local machine, feels too good to be true right?! Well there is LanceDB again. I mean from the moment you dirty your hands for your next RAG system all upto the time you put something as big as production, LanceDB scales amazingly well…&lt;/p&gt;

&lt;h3 id=&quot;multimodality&quot;&gt;Multimodality&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/embedded_databases/multimodality_in_lancedb.png?raw=true&quot; alt=&quot;multimodality&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The current embedded databases should not only support textual data but also be compatible with various file formats. It’s no longer just about text ingestion. Some time ago, I developed a GTA-5 multimodal RAG application that displays the GTA5 landscape upon entering a query. I highly recommend giving it a &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/03/03/multimodal-rag-application&quot;&gt;read&lt;/a&gt; to understand why the Multimodal RAG system is the new hotshot and why companies are eager to integrate it into their core. Honestly, I haven’t come across any embedded vector database other than LanceDB that can effortlessly ingest any kind of file format.&lt;/p&gt;

&lt;p&gt;By the way, multimodality does make sense because LanceDB is built on top of the Lance format. As mentioned earlier, it supports diverse data types, including images, audio, and text, making it incredibly flexible for applications with various data formats.&lt;/p&gt;

&lt;h3 id=&quot;searching-and-integrations&quot;&gt;Searching and Integrations&lt;/h3&gt;

&lt;p&gt;Ok, so we stored the Embeddings, we scaled our RAG too, now for a given query, we want to find the relevant embeddings, and that’s where LanceDB shines. Now Searching in LanceDB is as easy as it could be, you can just query your data in a number of ways - via SQL, full-text search , and vector search. As it supports the Hybrid search too which is one of the biggest favorable for the amazing search capabilities in LanceDB.&lt;/p&gt;

&lt;p&gt;But it’s not just about searching guys, it integrates well enough with native Python, JavaScript/TypeScript, Pandas, Pydantic, that means you can easily integrate it with your favorite programming languages, in addition to that, it has direct integrations with cloud storage providers like AWS S3 and Azure Blob Storage. This means that we can directly query data stored on the cloud, without any added ETL steps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/embedded_databases/grandma_knows.png?raw=true&quot; alt=&quot;grandma_knows&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Woah, I do love LanceDB&lt;/p&gt;
&lt;h3 id=&quot;more-or-less-we-looked-at-these-things-right-&quot;&gt;More or less, we looked at these things right :&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Columnar Oriented Databases&lt;/li&gt;
  &lt;li&gt;Lance Format&lt;/li&gt;
  &lt;li&gt;In-process&lt;/li&gt;
  &lt;li&gt;On-disk storage&lt;/li&gt;
  &lt;li&gt;Serverless&lt;/li&gt;
  &lt;li&gt;Embedded systems.&lt;/li&gt;
  &lt;li&gt;Scalability&lt;/li&gt;
  &lt;li&gt;Multimodality&lt;/li&gt;
  &lt;li&gt;Searching and Integrations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/embedded_databases/gen_ai_applications.png?raw=true&quot; alt=&quot;gen_ai_application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well all of them are bundled together with no cost upfront, ready to serve in one installation click and voila baby, you have your new best friend, maybe more than that, who knows? So what are you waiting for? Here is the &lt;a href=&quot;https://lancedb.com/&quot;&gt;reference&lt;/a&gt;, see you soon.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Create a Multimodal RAG application</title>
   <link href="http://localhost:4000/2024/03/03/multimodal-rag-application"/>
   <updated>2024-03-03T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/03/03/multimodal-rag-application</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Artificial Intelligence (AI) has been actively working with text for quite some time, but the world isn’t solely centered around words. If you take a moment to look around, you’ll find a mix of text, images, videos, audios, and their combinations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/multimodal_rag/Renevant%20Cheetah-66.jpg?raw=true&quot; alt=&quot;boomer_ai&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Today we are going to work on Multimodality which is basically a concept that essentially empowers AI models with the capacity to perceive, listen, and comprehend data in diverse formats together with the text. Pretty much like how we do!&lt;/p&gt;

&lt;p&gt;In an ideal situation, we should be able to mix different types of data together and show them to a generative AI model at the same time and iterate on it. It could be as simple as telling the AI model, “Hey, a few days ago, I sent you a picture of a brown, short dog. Can you find that picture for me?” and the model should then give us the details of that picture. Basically, we want the AI to understand things more like how we humans do,  becoming really good at handling and responding to all kinds of information.&lt;/p&gt;

&lt;p&gt;But the challenge here is to make a computer understand one data format with its related reference, and that could be a mix of text, audio, thermal imagery, and videos. Now to make this happen, we use something called Embeddings. It’s really a numeric vector which contains a bunch of numbers written together that might not mean much to us but are understood by machines very well.&lt;/p&gt;

&lt;h3 id=&quot;cat-is-equal-to-cat&quot;&gt;Cat is equal to Cat&lt;/h3&gt;

&lt;p&gt;Let’s think of the text components for now, so we are currently aiming that our model should learn that words like “Dog” and “Cat” are closely linked to the word “Pet.” Now this understanding is easily achievable by using an embedding model which will convert these text words into their respective embeddings first and then the model is trained to follow a straightforward logic: if words are related, they are close together in the vector space, if not, they would be separated by the adequate distance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/multimodal_rag/embeddings.png?raw=true&quot; alt=&quot;embeddings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But to help a model recognize that an image of a “Cat” and the word “Cat” are similar, we rely on Multimodal Embeddings. To simplify things a bit, imagine there is a magic box which is capable of handling various inputs – images, audios, text, and more.&lt;/p&gt;

&lt;p&gt;Now, when we feed the box with an image of a “Cat” with the text “Cat,” it performs its magic and produces two numeric vectors. When these two vectors were given to a machine, it made machines think, “Hmm, based on these numeric values, it seems like both are connected to “Cat”. So that’s exactly what we were aiming for! Our goal was to help machines to recognize the close connection between an image of a “Cat” and the text “Cat”. However, to validate this concept, when we plot those two numeric vectors in a vector space, it turns out they are very close to each other. This outcome exactly mirrors what we observed earlier with the proximity of the two text words “Cat” and “Dog” in the vector space.&lt;/p&gt;

&lt;h2 id=&quot;ladies-and-gentlemen-thats-the-essence-of-multimodality-&quot;&gt;Ladies and gentlemen, that’s the essence of Multimodality. 👏&lt;/h2&gt;

&lt;p&gt;So we made our model to comprehend the association between “Cat” images and the word “Cat.” Well this is it, I mean if you are able to do this, you would have ingested the audio, images, videos as well as the word “Cat” and the model will understand how the cat is being portrayed across all kinds of file format..&lt;/p&gt;

&lt;h3 id=&quot;rag-is-here&quot;&gt;RAG is here..&lt;/h3&gt;

&lt;p&gt;Well if you don’t know what RAG means, I would highly advise you to read this article &lt;a href=&quot;https://vipul-maheshwari.github.io/2024/02/14/rag-application-with-langchain&quot;&gt;here&lt;/a&gt; which I wrote some days back and loved by tons of people, not exaggerating it but yeah, it’s good to get the balls rolling..&lt;/p&gt;

&lt;p&gt;So there are impressive models like DALLE-2 that provide text-to-image functionality. Essentially, you input text, and the model generates relevant images for you. But can we create a system similar to Multimodal RAG, where the model produces output images based on our own data? Alright, so the goal for today is to create an AI model that when asked something like, “How many girls were there in my party?” 💀 not only provides textual information but also includes a relevant image related to it. Think of it as an extension of a simple RAG system, but now incorporating images.&lt;/p&gt;

&lt;p&gt;Before we dive in, remember that Multimodality isn’t limited to just text-to-image or image-to-text as it encompasses the freedom to input and output any type of data. However, for now, let’s concentrate on the interaction from image to text exclusively.&lt;/p&gt;

&lt;h3 id=&quot;contrastive-learning&quot;&gt;Contrastive learning&lt;/h3&gt;

&lt;p&gt;Now the question is, What exactly was that box doing? The magic it performs is known as Contrastive Learning. While the term might sound complex, it’s not that tricky. To simplify, consider a dataset with images, along with a caption describing what the image represents.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/multimodal_rag/clipmodel.png?raw=true&quot; alt=&quot;clipmodel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alright, now what happens is: we give our text-image model with these Positive and Negative samples, where each sample consists of an image and a descriptive text. Positive samples are those where the image and text are correctly aligned – for instance, a picture of a cat matched with the text “this is an image of a cat.” Conversely, negative samples involve a mismatch, like presenting an image of a dog alongside the text “this is an image of a cat.”&lt;/p&gt;

&lt;p&gt;Now we train our text-image model to recognize that positive samples offer accurate interpretations, while negative samples are misleading and should be disregarded during training. In formal terms this technique is called &lt;a href=&quot;https://openai.com/research/clip&quot;&gt;CLIP&lt;/a&gt; (Contrastive Language-Image Pre-training) introduced by OpenAI where authors trained an image-text model on something around 400 million image caption pairs taken from the internet and everytime model makes a mistake, the contrastive loss function increases and penalize it to make sure the model trains well. The same kind of principles are applied to the other modality combinations as well, so the voice of cat with the word cat is a positive sample for speech-text model, a video of cat with the descriptive text “this is a cat” is a positive sample for video-text model.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/multimodal_rag/easy.png?raw=true&quot; alt=&quot;easy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;show-time&quot;&gt;Show time&lt;/h3&gt;

&lt;p&gt;Well you don’t have to build that box from scratch because folks have already done it for us. There’s a Multimodal embedding model, like the “ViT-L/14” from OpenAI. This model can handle various data types, including text, images, videos, audios, and even thermal and gyroscope data. Now, onto the next question: how do we store those embeddings?&lt;/p&gt;

&lt;p&gt;For that we’ll need a vector database that can efficiently fetch, query, and retrieve relevant embeddings for us,  ideally one that supports multimodal data and doesn’t burn a hole in our wallets. That’s where LanceDB comes into play.&lt;/p&gt;

&lt;h3 id=&quot;vector-database&quot;&gt;Vector database&lt;/h3&gt;

&lt;p&gt;When we talk about the vector database, there are ton of options available in the current market, but there is something about the LanceDB which makes it stands out as an optimal choice for a vector database, As far as I have used it, it address the limitations of traditional embedded databases in handling AI/ML workloads. When I say traditional, it typically means those database management tools which are not aligned with the usage of heavy computation that comes with the ML infra.&lt;/p&gt;

&lt;p&gt;TLDR; LanceDB operates on a serverless architecture, meaning storage and compute are separated into two distinct units. This design makes it exceptionally fast for RAG use cases, ensuring fast fetching and retrieval. Additionally, it has some notable advantages – being open source, utilizing its Lance columnar data format built on top of Apache Arrow for high efficiency, persistent storage capabilities, and incorporating its own Disk Approximate Nearest Neighbor search. All these factors collectively make LanceDB an ideal solution for accessing and working with multimodal data. I love you LanceDB ❤️.&lt;/p&gt;

&lt;h3 id=&quot;data-time&quot;&gt;Data time&lt;/h3&gt;

&lt;p&gt;To add some excitement, I’ve crafted a GTA-V Image Captioning dataset, featuring thousands of images, each paired with a descriptive text illustrating the image’s content. Now, when we train our magic box, the expectation is clear – if I ask that box to provide me an image of “road with a stop sign,” it should deliver a GTA-V image of a road with a stop sign on it. Otherwise, what’s the point, right?&lt;/p&gt;

&lt;h3 id=&quot;faq&quot;&gt;FAQ&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;We will be using “ViT-L/14” to convert our multimodal data into its respective embeddings.&lt;/li&gt;
  &lt;li&gt;LanceDB as our vector database to store the relevant embeddings.&lt;/li&gt;
  &lt;li&gt;GTA-V Image Captioning dataset for our magic box.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;environment-setup&quot;&gt;Environment Setup&lt;/h3&gt;

&lt;p&gt;I am using a MacBook Air M1, and it’s important to note that some kinds of dependencies and configurations may vary depending on the type of system that you are running, so it’s important to take that into account.&lt;/p&gt;

&lt;p&gt;Here are the steps to install the relevant dependencies&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Create a virtual environment
python3 -m venv env

# Activate the virtual environment
source env/bin/activate

# Upgrade pip in the virtual environment
pip install --upgrade pip

# Install required dependencies
pip3 install lancedb clip torch datasets pillow 
pip3 install git+https://github.com/openai/CLIP.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And don’t forget to get your access token from the hugging face to download the data.&lt;/p&gt;

&lt;h3 id=&quot;downloading-the-data&quot;&gt;Downloading the Data&lt;/h3&gt;
&lt;p&gt;Dataset can easily be fetched using the datasets library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import clip
import torch
import os
from datasets import load_dataset

ds = load_dataset(&quot;vipulmaheshwari/GTA-Image-Captioning-Dataset&quot;)
device = torch.device(&quot;mps&quot;)
model, preprocess = clip.load(&quot;ViT-L-14&quot;, device=device)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Downloading the dataset may require some time, so please take a moment to relax while this process completes. Once the download is finished, you can visualize some sample points like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from textwrap import wrap
import matplotlib.pyplot as plt
import numpy as np

def plot_images(images, captions):
    plt.figure(figsize=(15, 7))
    for i in range(len(images)):
        ax = plt.subplot(1, len(images), i + 1)
        caption = captions[i]
        caption = &quot;\n&quot;.join(wrap(caption, 12))
        plt.title(caption)
        plt.imshow(images[i])
        plt.axis(&quot;off&quot;)

# Assuming ds is a dictionary with &quot;train&quot; key containing a list of samples
sample_dataset = ds[&quot;train&quot;]
random_indices = np.random.choice(len(sample_dataset), size=2, replace=False)
random_indices = [index.item() for index in random_indices]

# Get the random images and their captions
random_images = [np.array(sample_dataset[index][&quot;image&quot;]) for index in random_indices]
random_captions = [sample_dataset[index][&quot;text&quot;] for index in random_indices]

# Plot the random images with their captions
plot_images(random_images, random_captions)

# Show the plot
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/multimodal_rag/output3.png?raw=true&quot; alt=&quot;output3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;storing-the-embeddings&quot;&gt;Storing the Embeddings&lt;/h3&gt;

&lt;p&gt;The dataset consists of two key features: the image and its corresponding descriptive text. Initially, our task is to create a LanceDB table to store the embeddings. This process is straightforward – all you need to do is define the relevant schema. In our case, the columns include “vector” for storing the multimodal embeddings, a “text” column for the descriptive text, and a “label” column for the corresponding IDs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import pyarrow as pa
import lancedb
import tqdm

db = lancedb.connect(&apos;./data/tables&apos;)
schema = pa.schema(
  [
      pa.field(&quot;vector&quot;, pa.list_(pa.float32(), 512)),
      pa.field(&quot;text&quot;, pa.string()),
      pa.field(&quot;id&quot;, pa.int32())
  ])
tbl = db.create_table(&quot;gta_data&quot;, schema=schema, mode=&quot;overwrite&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Executing this will generate a table with the specified schema, and it’s ready to store the embeddings along with the relevant columns. It’s as straightforward as that – almost too easy!&lt;/p&gt;

&lt;h3 id=&quot;encode-the-images&quot;&gt;Encode the Images&lt;/h3&gt;

&lt;p&gt;Now, we’ll simply take the images from the dataset, feed them into an encoding function that leverages our Multimodal Embedding model, and generate the corresponding embeddings. These embeddings will then be stored in the database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def embed_image(img):
    processed_image = preprocess(img)
    unsqueezed_image = processed_image.unsqueeze(0).to(device)
    embeddings = model.encode_image(unsqueezed_image)
    
    # Detach, move to CPU, convert to numpy array, and extract the first element as a list
    result = embeddings.detach().cpu().numpy()[0].tolist()
    return result
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So our &lt;code&gt;embed_image&lt;/code&gt; function takes an input image, prepocesses it through our CLIP model preprocessor, encode the preprocessed image and returns a list representing the embeddings of that image. This returned embedding serves as a concise numerical representation, capturing all the key features and patterns within the image for downstream tasks or analysis. The next thing is to call this function for all the images and store the relevant embeddings in the database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data = []
for i in range(len(ds[&quot;train&quot;])):
    img = ds[&quot;train&quot;][i][&apos;image&apos;]
    text = ds[&quot;train&quot;][i][&apos;text&apos;]
    
    # Encode the image
    encoded_img = embed_image(img)
    data.append({&quot;vector&quot;: encoded_img, &quot;text&quot;: text, &quot;id&quot; : i})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we’re just taking a list, adding the numeric embeddings, reference text and the current index id to it. All that’s left is to include this list in our LanceDB table. And voila, our datalake for the embeddings is set up and good to go!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;tbl.add(data)
tbl.to_pandas()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Up until now, we’ve efficiently converted the images into their respective multimodal embeddings and stored them in the LanceDB table. Now the LanceDB tables offer a convenient feature: if there’s a need to add or remove images, it’s remarkably straightforward. Just encode the new image and add it, following to the same steps we followed for the previous images.&lt;/p&gt;

&lt;h3 id=&quot;query-search&quot;&gt;Query search&lt;/h3&gt;

&lt;p&gt;Our next move is to embed our text query using the same multimodal embedding model we used for our images. Remember that “box” I mentioned earlier? Essentially, we want this box to create embeddings for both our images and our texts which ensures that the representation of different types of data happens in the same way. Following this, we just need to initiate a search to find the nearest image embeddings that matches our text query.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
def embed_txt(txt):
    tokenized_text = clip.tokenize([txt]).to(device)
    embeddings = model.encode_text(tokenized_text)
    
    # Detach, move to CPU, convert to numpy array, and extract the first element as a list
    result = embeddings.detach().cpu().numpy()[0].tolist()
    return result

res = tbl.search(embed_txt(&quot;a road with a stop&quot;)).limit(3).to_pandas()
res
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;0 | [0.064575195, .. ] | there is a stop sign...| 569 |	131.995728
1 | [-0.07989502, .. ] | there is a bus that... | 423 | 135.047852
2 | [0.06756592, .. ]  | amazing view of a ...	| 30  | 135.309937
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s slow down a bit and understand what just happened. Putting simply, the code snippet executes a search algorithm in its core to pinpoint the most relevant image embedding that aligns with our text query. The resulting output, as showcased above, gives us the embeddings which closely resembles our text query.  In the result, the second column presents the embedding vector, while the third column contains the description of the image that closely matches our text query. Essentially, we’ve determined which image closely corresponds to our text query by examining the embeddings of both our text query and the image.&lt;/p&gt;

&lt;h3 id=&quot;its-similar-to-saying-if-these-numbers-represent-the-word-cat-i-spot-an-image-with-a-similar-set-of-numbers-so-most-likely-its-a-match-for-an-image-of-a-cat-&quot;&gt;It’s similar to saying, If these numbers represent the word “Cat”, I spot an image with a similar set of numbers, so most likely it’s a match for an image of a “Cat”. 😺&lt;/h3&gt;

&lt;p&gt;If you are looking for the explanation of how the search happens, I will write a detailed explanation in the coming write ups because it’s so exciting to look under the hood and see how the searching happens. Essentially there is something called Approximate Nearest Neighbors (ANN) which is a technique used to efficiently find the closest points in high-dimensional spaces. ANN is extensively used in data mining, machine learning, computer vision and NLP use cases. So when we passed our embedded text query to the searching algorithm and asked it to give us the closest sample point in the vector space, it used a type of ANN algorithm to get it for us. Specifically LanceDB utilizes DANN (Deep Approximate Nearest Neighbor) for searching the relevant embeddings within its ecosystem..&lt;/p&gt;

&lt;p&gt;In our results, we have five columns. The first is the index number, the second is the embedding vector, the third is the description of the image matching our text query, and the fourth is the label of the image. However, let’s focus on the last column – Distance. When I mentioned the ANN algorithm, it simply draws a line between the current data point (in our case, the embedding of our text query) and identifies which data point (image embedding) is closest to it. If you observe that the other data points in the results have a greater distance compared to the top one, it indicates they are a bit further away or more unrelated to our query. Just to make it clear, the calculation of distance is a part of the algorithm itself.&lt;/p&gt;

&lt;h2 id=&quot;d-day&quot;&gt;D-DAY&lt;/h2&gt;

&lt;p&gt;Now that we have all the necessary information, displaying the most relevant image for our query is straightforward. Simply take the relevant label of the top-matched embedding vector and showcase the corresponding image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data_id = int(res[&apos;id&apos;][0])
display(ds[&quot;train&quot;][data_id][&apos;image&apos;])
print(ds[&quot;train&quot;][data_id][&apos;text&apos;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/multimodal_rag/output_final.png?raw=true&quot; alt=&quot;output_final&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;there is a truck driving down a street with a stop sign
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;

&lt;p&gt;To make things more interesting, I’m currently working on creating an extensive GTA-V captioning dataset. This dataset will include a larger number of images paired with their respective reference text, providing us with a richer set of queries to explore and experiment with.. Nevertheless, there’s always room for refining the model. We can explore creating a customized CLIP model, adjusting various parameters. Increasing the number of training epochs may afford the model more time to grasp the relevance between embeddings. Additionally, there’s an impressive multimodal embedding model developed by the Meta known as &lt;a href=&quot;https://imagebind.metademolab.com/&quot;&gt;ImageBind&lt;/a&gt;. We can consider trying ImageBind as an alternative to our current multimodal embedding model and compare the outcomes. With numerous options available, the fundamental concept behind the Multimodal RAG workflow remains largely consistent.&lt;/p&gt;

&lt;p&gt;Here’s how everything comes together in one frame and this is the &lt;a href=&quot;https://colab.research.google.com/drive/1LM-WrDSBXpiMZ94CtaMCaGHlkxqGR6WK?usp=sharing&quot;&gt;Collab&lt;/a&gt; for your reference&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/multimodal_rag/multimodalrag.png?raw=true&quot; alt=&quot;multimodal_rag&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Create LLM apps using RAG</title>
   <link href="http://localhost:4000/2024/02/14/rag-application-with-langchain"/>
   <updated>2024-02-14T00:00:00+05:30</updated>
   <id>http://localhost:4000/2024/02/14/rag-application-with-langchain</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/make_your_application_with_rag/cat.png?raw=true&quot; alt=&quot;cat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re considering making a personalized bot for your documents or your website that responds to you, you’re in the right spot. I’m here to help you create a bot using Langchain and RAG strategies for this purpose.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;understanding-the-limitations-of-chatgpt-and-llms&quot;&gt;Understanding the Limitations of ChatGPT and LLMs&lt;/h3&gt;

&lt;p&gt;ChatGPTs and other Large Language Models (LLMs) are extensively trained on text corpora to comprehend language semantics and coherence. Despite their impressive capabilities, these models have limitations that require careful consideration for particular use cases. One significant challenge is the potential for hallucinations, where the model might generate inaccurate or contextually irrelevant information.&lt;/p&gt;

&lt;p&gt;Imagine requesting the model to enhance your company policies; in such scenarios, ChatGPTs and other Large Language Models might struggle to provide factual responses because they lack training on your company’s data. Instead, they may generate nonsensical or irrelevant responses, which can be unhelpful. So, how can we ensure that an LLM comprehends our specific data and generates responses accordingly? This is where techniques like Retrieval Augmentation Generation (RAG) come to the rescue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/make_your_application_with_rag/LLM_without_RAG.png?raw=true&quot; alt=&quot;RAG&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-is-rag&quot;&gt;What is RAG?&lt;/h3&gt;
&lt;p&gt;RAG or Retrieval Augmented Generation uses three main workflows to generate and give the better response&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Information Retrieval: When a user asks a question, the AI system retrieves the relevant data from a well-maintained knowledge library or external sources like databases, articles, APIs, or document repositories. This is achieved by converting the query into a numerical format or vector that can be understood by machines.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LLM:The retrieved data is then presented to the LLM or Large Language Model, along with the user’s query. The LLM uses this new knowledge and its training data to generate the response.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Response: Finally, the LLM generates a response that is more accurate and relevant since it has been augmented with the retrieved information. I mean we gave LLM some additional information from our Knowledge library which allows LLMs to provide more contextually relevant and factual responses, solving the problem of models when they are just hallucinating or providing irrelevant answers.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take the example of company policies again. Suppose you have an HR bot that handles queries related to your Company policies. Now if someone asks anything specific to the policies, The bot can pull the most recent policy documents from the knowledge library, pass the relevant context to a well crafted prompt which is then passed further to the LLM for generating the response.&lt;/p&gt;

&lt;p&gt;To make it easier, Imagine a LLM as your knowledgeable friend who seems to know everything, from Geography to Computer Science, from Politics to Philosophy. Now, picture yourself asking this friend a few questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Who handles my laundry on weekends?”&lt;/li&gt;
  &lt;li&gt;“Who lives next door to me?”&lt;/li&gt;
  &lt;li&gt;“What brand of peanut butter do I prefer?”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chances are, your friend wouldn’t be able to answer these questions. Most of the time, no. But let’s say this distant friend becomes closer to you over time, he comes to your place regularly, knows your parents very well, you both hangout pretty often, you go on outings, blah blah blah.. You got the point.&lt;/p&gt;

&lt;p&gt;I mean he is gaining access to personal and insider information about you.  Now, when you pose the same questions, he can somehow answer those questions with more relevance now because he is better suited with your personal insights.&lt;/p&gt;

&lt;p&gt;Similarly, a LLM, when provided with additional information or access to your data, won’t guess or hallucinate. Instead, it can leverage that access data to provide more relevant and accurate answers.&lt;/p&gt;

&lt;h3 id=&quot;to-break-it-down-here-are-the-exact-steps-to-create-any-rag-application&quot;&gt;To break it down, here are the exact steps to create any RAG application…&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Extract the relevant information from your data sources.&lt;/li&gt;
  &lt;li&gt;Break the information into the small chunks.&lt;/li&gt;
  &lt;li&gt;Store the chunks as their embedddings into a vector database.&lt;/li&gt;
  &lt;li&gt;Create a prompt template which will be fed to the LLM with the query and the context.&lt;/li&gt;
  &lt;li&gt;Convert the query to it’s relevant embedding using same embedding model.&lt;/li&gt;
  &lt;li&gt;Fetch k number of relevant documents related to the query from the vector database.&lt;/li&gt;
  &lt;li&gt;Pass the relevant documents to the LLM and get the response.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;faqs&quot;&gt;FAQs&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We will be using &lt;a href=&quot;https://python.langchain.com/docs/get_started/introduction&quot;&gt;Langchain&lt;/a&gt; for this task, Basically it’s like a wrapper which lets you talk and manage your LLM operations better. Note that the Langchain is updating very fast and some functions and other classes might moved to the different modules. So if something doesn’t work, just check if you are importing the libraries from the right sources!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Along with it we will be using &lt;a href=&quot;https://huggingface.co/&quot;&gt;Hugging Face&lt;/a&gt;, an open-source library for building, training, and deploying state-of-the-art machine learning models, especially about NLP. To use the HuggingFace we need the access token, Get your access token &lt;a href=&quot;https://huggingface.co/docs/hub/security-tokens&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For our models, we’ll need two key components: a LLM (Large Language Model) and an embedding model. While paid sources like OpenAI offer these, we’ll be utilizing open-source models to ensure accessibility for everyone.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we need a Vector Database to store our embeddings, For that task, we’ve got &lt;a href=&quot;https://lancedb.com/&quot;&gt;LanceDB&lt;/a&gt; – it’s like a super-smart data lake for handling lots of information. It’s a top-notch vector database, making it the go-to choice for dealing with complex data like vector embeddings.. And the best part? It won’t burn a dent in your pocket because it’s open source and free to use!!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To keep things simple, our data ingestion process will involve using a URL and some PDFs. While you can incorporate additional data sources if needed, we’ll concentrate solely on these two for now.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With Langchain for the interface, Hugging Face for fetching the models, along with open-source components, we’re all set to go! This way, we will save some bucks while still having everything we need. Let’s move to the next steps&lt;/p&gt;

&lt;h3 id=&quot;environment-setup&quot;&gt;Environment Setup&lt;/h3&gt;

&lt;p&gt;I am using a MacBook Air M1, and it’s important to note that certain dependencies and configurations may vary depending on the type of system you are using. Now open your favorite editor, create a python environment and install the relevant dependencies&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Create a virtual environment
python3 -m venv env

# Activate the virtual environment
source env/bin/activate

# Upgrade pip in the virtual environment
pip install --upgrade pip

# Install required dependencies
pip3 install lancedb langchain langchain_community prettytable sentence-transformers huggingface-hub bs4 pypdf pandas

# This is optional, I did it for removing a warning
pip3 uninstall urllib3
pip3 install &apos;urllib3&amp;lt;2.0&apos;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a .env file in the same directory to place your Hugging Face api credentials like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;HUGGINGFACEHUB_API_TOKEN = hf_KKNWfBqgwCUOHdHFrBwQ.....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ensure the name “HUGGINGFACEHUB_API_TOKEN” remains unchanged, as it is crucial for authentication purposes.&lt;/p&gt;

&lt;p&gt;If you prefer a straightforward approach without relying on external packages or file loading, you can directly configure the environment variable within your code like this..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;HF_TOKEN = &quot;hf_KKNWfBqgwCUOHdHFrBwQ.....&quot;
os.environ[&quot;HUGGINGFACEHUB_API_TOKEN&quot;] = HF_TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally create a data folder in the project’s root directory, designated as the central repository for storing PDF documents. You can add some sample PDFs for testing purposes; for instance, I am using the &lt;a href=&quot;https://arxiv.org/pdf/2207.02696.pdf&quot;&gt;Yolo V7&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/abs/1706.03762&quot;&gt;Transformers&lt;/a&gt; paper for demonstration. It’s important to note that this designated folder will function as our primary source for data ingestion.&lt;/p&gt;

&lt;p&gt;It seems like everything is in order, and we’re all set!&lt;/p&gt;

&lt;h3 id=&quot;step-1--extracting-the-relevant-information&quot;&gt;Step 1 : Extracting the relevant information&lt;/h3&gt;

&lt;p&gt;To get your RAG application running, the first thing we need to do is to extract the relevant information from the various data sources. It can be a website page, a PDF file, a notion link, a google doc whatever it is, it needs to be extracted from it’s original source first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import os
from langchain_community.document_loaders import WebBaseLoader, PyPDFLoader, DirectoryLoader

# Put the token values inside the double quotes
HF_TOKEN = &quot;hf_*******&quot;
os.environ[&quot;HUGGINGFACEHUB_API_TOKEN&quot;] = HF_TOKEN

# Loading the web url and data 
url_loader = WebBaseLoader(&quot;https://gameofthrones.fandom.com/wiki/Jon_Snow&quot;)
documents_loader = DirectoryLoader(&apos;data&apos;, glob=&quot;./*.pdf&quot;, loader_cls=PyPDFLoader)

# Creating the instances
url_docs = url_loader.load()
data_docs = documents_loader.load()

# Combining all the data that we ingested
docs = url_docs + data_docs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will ingest all the data from the URL link and the PDFs.&lt;/p&gt;

&lt;h3 id=&quot;step-2--breaking-the-information-into-smaller-chunks&quot;&gt;Step 2 : Breaking the information into smaller chunks&lt;/h3&gt;

&lt;p&gt;We’ve all the necessary data for developing our RAG application. Now, it’s time to break down this information into smaller chunks. Later, we’ll utilize an embedding model to convert these chunks into their respective embeddings. But why is it important?&lt;/p&gt;

&lt;p&gt;Think of it like this: If you’re tasked with digesting a 100-page book all at once and then asked a specific question about it, it would be challenging to retrieve the necessary information from the entire book to provide an answer. However, if you’re permitted to break the book into smaller, manageable chunks—let’s say 10 pages each—and each chunk is labeled with an index from 0 to 9, the process becomes much simpler. When the same question is posed after this breakdown, you can easily locate the relevant chunk based on its index and then extract the information needed to answer the question accurately.&lt;/p&gt;

&lt;p&gt;Picture the book as your extracted information, with each 10-page segment representing a small chunk of data, and the index pages as the embedding. Essentially, we’ll apply an embedding model to these chunks to transform the information into their respective embeddings. While as humans, we may not directly comprehend or relate to these embeddings, they serve as numeric representations of the chunks to our application.  This is how you can do this in Python&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from langchain.text_splitter import RecursiveCharacterTextSplitter

text_splitter = RecursiveCharacterTextSplitter(chunk_size = 1000, chunk_overlap = 50)
chunks = text_splitter.split_documents(docs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the chunk_size parameter specifies the maximum number of characters that a chunk can contain, while the chunk_overlap parameter specifies the number of characters that should overlap between two adjacent chunks. With the chunk_overlap set to 50, the last 50 characters of the adjacent chunks will be shared between each other.&lt;/p&gt;

&lt;p&gt;This approach helps to prevent important information from being split across two chunks, ensuring that each chunk contains sufficient contextual information of their neighbor chunks for the subsequent processing or analysis.&lt;/p&gt;

&lt;p&gt;Shared information at the boundary of neighboring chunks enables a more seamless transition and understanding of the text’s content. The best strategy for choosing the chunk_size and chunk_overlap parameters largely depends on the nature of the documents and the purpose of the application.&lt;/p&gt;

&lt;h3 id=&quot;step-3--creating-the-embeddings-and-store-them-into-a-vectordatabase&quot;&gt;Step 3 : Creating the embeddings and store them into a vectordatabase&lt;/h3&gt;

&lt;p&gt;There are two primary methods to generate embeddings for our text chunks. The first involves downloading a model, managing preprocessing, and conducting computations independently. Alternatively, we can leverage Hugging Face’s model hub, which offers a variety of pre-trained models for various NLP tasks, including embedding generation.&lt;/p&gt;

&lt;p&gt;Opting for the latter approach allows us to utilize one of Hugging Face’s embedding models. With this method, we simply provide our text chunks to the chosen model, saving us from the resource-intensive computations on our local machines. 💀&lt;/p&gt;

&lt;p&gt;Hugging Face’s model hub provides numerous options for embedding models, and you can explore the &lt;a href=&quot;https://huggingface.co/spaces/mteb/leaderboard&quot;&gt;leaderboard&lt;/a&gt; to select the most suitable one for your requirements. For now, we’ll proceed with “sentence-transformers/all-MiniLM-L6-v2.” This model is pretty fast and highly efficient in our task!!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from langchain_community.embeddings import HuggingFaceEmbeddings

embedding_model_name = &apos;sentence-transformers/all-MiniLM-L6-v2&apos;
embeddings = HuggingFaceEmbeddings(model_name=embedding_model_name, model_kwargs={&apos;device&apos;: &apos;cpu&apos;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s a way to see the number of embeddings for each chunk&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;query = &quot;Hello I want to see the length of the embeddings for this document.&quot;
len(embeddings.embed_documents([query])[0])

# 384
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have the embeddings for our chunks, now we need a vector database to store them.&lt;/p&gt;

&lt;p&gt;When it comes to vector databases, there are plenty of options out there suiting various needs. Databases like Pinecone offer adequate performance and advanced features but come with a hefty price tag. On the other hand, open-source alternatives like FAISS or Chroma may lack some extras but are more than sufficient for those not who don’t require extensive scalability.&lt;/p&gt;

&lt;p&gt;But wait, I am dropping a bomb here, I’ve recently come across LanceDB, So it’s an open-source vector database similar to FAISS and Chroma. What makes LanceDB stand out is not just its open-source nature but its unparalleled scalability. In fact, after a closer look, I realized that I haven’t done justice in highlighting the true value propositions of LanceDB earlier!!&lt;/p&gt;

&lt;p&gt;Surprisingly, LanceDB is the most scalable vector database available, outperforming even the likes of Pinecone, Chroma, Qdrant, and others. Scaling up to a billion vectors locally on your laptop is a feat only achievable with LanceDB. I mean this capability is a game-changer, especially when you compare it to other vector databases struggling even with a hundred million vectors. What’s more mind blowing is that LanceDB manages to offer this unprecedented scalability at a fraction of cost, I mean they are offering the utilities and database tools at much cheaper rates than its closest counterparts.&lt;/p&gt;

&lt;p&gt;So now, We’ll create an instance of LanceDB vector database by calling &lt;code&gt;lancedb.connect(&quot;lance_database&quot;)&lt;/code&gt;. This line essentially sets up a connection to the LanceDB database named “lance_database.” Next, we create a table within the database named “rag_sample” using the create_table function. Now we initialzed this table with a single data entry which includes a numeric vector generated by the embed_query function. So text “Hello World” is first converted to it’s numeric representation (fancy name of embeddings) and then it’s mapped to &lt;code&gt;id&lt;/code&gt; number 1. Like a key-value pair. Lastly, the mode=”overwrite” parameter ensures that if the table “rag_sample” already exists, it will be overwritten with the new data.&lt;/p&gt;

&lt;p&gt;This happens with all the text chunks and it’s quite straightforward. This is how it looks in Python..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import lancedb
from langchain_community.vectorstores import LanceDB

db = lancedb.connect(&quot;lance_database&quot;)
table = db.create_table(
    &quot;rag_sample&quot;,
    data=[
        {
            &quot;vector&quot;: embeddings.embed_query(&quot;Hello World&quot;),
            &quot;text&quot;: &quot;Hello World&quot;,
            &quot;id&quot;: &quot;1&quot;,
        }
    ],
    mode=&quot;overwrite&quot;,
)

docsearch = LanceDB.from_documents(chunks, embeddings, connection=table)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NO ROCKET SCIENCE HA!&lt;/p&gt;

&lt;h3 id=&quot;step-4--create-a-prompt-template-which-will-be-fed-to-the-llm&quot;&gt;Step 4 : Create a prompt template which will be fed to the LLM&lt;/h3&gt;

&lt;p&gt;Ok now comes the prompt template. So when you write a question to the ChatGPT and it answers that question, you are basically providing a prompt to the model so that it can understand what the question is. When companies train the models, they decide what kind of prompt they are going to use for invoking the model and ask the question. For example, if you are working with “Mistral 7B instruct” and you want the optimal results it’s recommended to use the following chat template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;lt;s&amp;gt;[INST] Instruction [/INST] Model answer&amp;lt;/s&amp;gt;[INST] Follow-up instruction [/INST]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &amp;lt;s&amp;gt; and &amp;lt;/s&amp;gt; are special tokens to represent beginning of string (BOS) and end of string (EOS) while [INST] and [/INST] are regular strings. It’s just that the Mistral 7B instruct is made in such a way that the model looks for those special tokens to understand the question better. Different types of LLMs have different kinds of instructed prompts.&lt;/p&gt;

&lt;p&gt;Now for our case we are going to use &lt;a href=&quot;https://huggingface.co/HuggingFaceH4/zephyr-7b-alpha&quot;&gt;huggingfaceh4/zephyr-7b-alpha&lt;/a&gt; which is a text generation model. Just to make it clear, Zephyr-7B-α has not been aligned or formated to human preferences with techniques like RLHF (Reinforcement Learning with Human Feedback) or deployed with in-the-loop filtering of responses like ChatGPT, so the model can produce problematic outputs (especially when prompted to do so).&lt;/p&gt;

&lt;p&gt;Instead of writing a Prompt of our own, I will use ChatPromptTemplate class which creates a prompt template for the chat models. In layman terms, instead of writing a specified prompt I am letting ChatPromptTemplate to do it for me. Here is an example prompt template that is being generated from the manual messsages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from langchain_core.prompts import ChatPromptTemplate

chat_template = ChatPromptTemplate.from_messages(
    [
        (&quot;system&quot;, &quot;You are a helpful AI bot. Your name is {name}.&quot;),
        (&quot;human&quot;, &quot;Hello, how are you doing?&quot;),
        (&quot;ai&quot;, &quot;I&apos;m doing well, thanks!&quot;),
        (&quot;human&quot;, &quot;{user_input}&quot;),
    ]
)

messages = chat_template.format_messages(name=&quot;Bob&quot;, user_input=&quot;What is your name?&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don’t want to write the manual instructions, you can just use the &lt;em&gt;from_template&lt;/em&gt; function to generate a more generic prompt template which I used for this project. Here it is..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from langchain_core.prompts import ChatPromptTemplate

template = &quot;&quot;&quot;
{query}
&quot;&quot;&quot;

prompt = ChatPromptTemplate.from_template(template)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our prompt is set! We’ve crafted a single message, assuming it’s from a human xD . If you’re not using the from_messages function, the ChatPromptTemplate will ensure your prompt works seamlessly with the language model by reserving some additional system messages. There’s always room for improvement with more generic prompts to achieve better results. For now this setup should work..&lt;/p&gt;

&lt;h3 id=&quot;step-5--convert-the-query-to-its-relevant-embedding-using-same-embedding-model&quot;&gt;Step 5 : Convert the query to it’s relevant embedding using same embedding model.&lt;/h3&gt;

&lt;p&gt;Now, let’s talk about the query or question we want to ask our RAG application. We can’t just pass the query to our model and expect information in return. Instead, we need to pass the query through the same embedding model used for the chunks earlier. Why is this important? Well, by embedding queries, we allow models to compare them efficiently with previously processed chunks of text. This enables tasks like finding similar documents or generating relevant responses.&lt;/p&gt;

&lt;p&gt;To understand it better, Imagine you and your friend speak different languages, like English and Hindi, and you need to understand each other’s writings. If your friend hands you a page in Hindi, you won’t understand it directly. So, your friend translates it first, turning the Hindi into English for you. So now if your friend asks you a question in Hindi, you can easily translate that question into English first and look up for the relevant answers in that translated English Text..&lt;/p&gt;

&lt;p&gt;Similarly, we initially transformed textual information into their corresponding embeddings. Now,  when you pose a query, it undergoes a similar kind of conversion into the numeric form using the same embedding model applied previously to process our textual chunks. This consistent approach allows for efficient retrieval of relevant responses.&lt;/p&gt;

&lt;h3 id=&quot;step-6--fetch-k-number-of-documents&quot;&gt;Step 6 : Fetch K number of documents.&lt;/h3&gt;

&lt;p&gt;Now, let’s talk about the retriever. Its job is to dive into the vector database and perform a search to find relevant documents. It returns a set number, let’s call it “k”, of these documents, which are ranked based on their contextual relevance to the query or question you asked. You can set “k” as a parameter, indicating how many relevant documents you want - whether it’s 2, 5, or 10. Generally, if you have a smaller amount of data, it’s best to stick with a lower “k”, around 2. For longer documents or larger datasets, a “k” between 10 and 20 is recommended.&lt;/p&gt;

&lt;p&gt;Different &lt;a href=&quot;https://python.langchain.com/docs/modules/data_connection/retrievers/vectorstore&quot;&gt;search techniques&lt;/a&gt; can be employed to fetch relevant documents more effectively and quickly from a vector database. The choice depends on various factors such as your specific use case, the amount of data you have, what kind of vector database you are using and the context of your problem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;retriever = docsearch.as_retriever(search_kwargs={&quot;k&quot;: 3})
docs = retriever.get_relevant_documents(&quot;what did you know about Yolo V7?&quot;)
print(docs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you run this code, the retriever will fetch 3 most most relevant documents from the vector database. All these documents will be the contexts for our LLM model to generate the response for our query.&lt;/p&gt;

&lt;h3 id=&quot;step-7--pass-the-relevant-documents-to-the-llm-and-get-the-response&quot;&gt;Step 7 : Pass the relevant documents to the LLM and get the response.&lt;/h3&gt;

&lt;p&gt;So far, we’ve asked our retriever to fetch a set number of relevant documents from the database. Now, we need a language model (LLM) to generate a relevant response based on that context. To ensure robustness, let’s remember that at the beginning of this blog, I mentioned that LLMs like ChatGPT can sometimes generate irrelevant responses, especially when asked about specific use cases or contexts. However, this time, we’re providing the context from our own data to the LLM as a reference. So, it will consider this reference along with its general capabilities to answer the question. That’s the whole idea behind using RAG!&lt;/p&gt;

&lt;p&gt;Now, let’s dive into implementing the language model (LLM) aspect of our RAG setup. We’ll be using zephyr model architecture from the Hugging Face Hub. Here’s how we do it in Python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from langchain_community.llms import HuggingFaceHub

# Model architecture
llm_repo_id = &quot;huggingfaceh4/zephyr-7b-alpha&quot;
model_kwargs = {&quot;temperature&quot;: 0.5, &quot;max_length&quot;: 4096, &quot;max_new_tokens&quot;: 2048}
model = HuggingFaceHub(repo_id=llm_repo_id, model_kwargs=model_kwargs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this code snippet, we’re instantiating our language model using the Hugging Face Hub. Specifically, we’re selecting the zephyr 7 billion model which is placed in this repository ID &lt;a href=&quot;https://huggingface.co/HuggingFaceH4/zephyr-7b-alpha&quot;&gt;“huggingfaceh4/zephyr-7b-alpha”&lt;/a&gt;. Choosing this model isn’t arbitrary; as I said before, it’s based on the model’s suitability for our specific task and requirements. As we are already implementing only Open Source components, Zephyr 7 billion works good enough to generate a useful response with minimal overhead and low latency.&lt;/p&gt;

&lt;p&gt;This model comes with some additional parameters to fine-tune its behavior. We’ve set the temperature to 0.5, which controls the randomness of the generated text. As a lower temperature tends to result in more conservative and predictable outputs and when the temperature is set to max which is 1, the model tries to be as creative as it could, so based on what type of output you want for your use case, you can tweak this parameter. For the sake of the simplicity and demonstration purposes, I set it to 0.5 to make sure we get decent results. Next is max_length parameter which defines the maximum length of the generated text and it includes the size of your prompt as well as the response.&lt;/p&gt;

&lt;p&gt;max_new_tokens sets the threshold on the maximum number of new tokens that can be generated. As a general rule of thumb, the max_new_tokens should always be less than or equal to the max_length parameter. Why? Think about it..&lt;/p&gt;

&lt;h3 id=&quot;step-8--create-a-chain-for-invoking-the-llm&quot;&gt;Step 8 : Create a chain for invoking the LLM.&lt;/h3&gt;

&lt;p&gt;We have everything we want for our RAG application. The last thing we need to do is to create a chain for invoking the LLM on our query to generate the response. There are different types of chains for the different types of use cases, if you like your LLM to remember the context of the chat over the time like the ChatGPT , you would need a memory instance which can be shared among multiple conversation pieces, for such cases, there are conversational chains available.&lt;/p&gt;

&lt;p&gt;For now we just need a chain which can combine our retrieved contexts and pass it with the query to the LLM to generate the response.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough

rag_chain = (
    {&quot;context&quot;: retriever,  &quot;query&quot;: RunnablePassthrough()}
    | prompt
    | model
    | StrOutputParser()
)

response = rag_chain.invoke(&quot;Who killed Jon Snow?&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have our Prompt, model, context and the query! All of them are combined into a single chain. It’s pretty much what all the chains does! Now before running the final code, I want to give a quick check on these two helper functions: 
&lt;code&gt;RunnablePassthrough()&lt;/code&gt; and &lt;code&gt;StrOutputParser()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;RunnablePassthrough&lt;/code&gt; class in &lt;code&gt;LangChain&lt;/code&gt; serves to pass inputs unchanged or with additional keys. In our chain, a prompt expects input in the form of a map with keys “context” and “question.” However, user input only includes the “question.” or the “query”.  Here, &lt;code&gt;RunnablePassthrough&lt;/code&gt; is utilized to pass the user’s question under the “question” key while retrieving the context using a retriever. It just ensures that the input to the prompt conforms to the expected format.&lt;/p&gt;

&lt;p&gt;Secondally, &lt;code&gt;StrOutputParser&lt;/code&gt; is typically employed in RAG chains to parse the output of the model into a human-readable string. In the layman terms, It is responsible for transforming the model’s output into a more coherent and grammatically correct sentence, which is generally better readable by Humans! That’s it!&lt;/p&gt;

&lt;h3 id=&quot;d-day&quot;&gt;D-Day&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/make_your_application_with_rag/LLM_with_RAG.png?raw=true&quot; alt=&quot;With_RAG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To make sure we get the entire idea even if the response gets cut off, I’ve implemented a function called &lt;code&gt;get_complete_sentence()&lt;/code&gt;. Basically this function helps extract the last complete sentence from the text. So, even if the response hits the maximum token limit that we set upon and it gets truncated midway, we will still get a coherent understanding of the message.&lt;/p&gt;

&lt;p&gt;For practical testing, I suggest storing some low sized PDFs in the data folder of your project. You can choose PDFs related to various topics or domains that you want the chatbot to interact with. Additionally, providing a URL as a reference for the chatbot can be helpful for testing. For example, you could use a Wikipedia page, a research paper, or any other online document relevant to your testing goals. During my testing, I used a URL containing information about Jon Snow from Game of Thrones,  and PDFs of Transformers paper, and the YOLO V7 paper to evaluate the bot’s performance. Let’s see how our bot performs in varied content.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import os
import time
import lancedb
from langchain_community.vectorstores import LanceDB

from langchain_community.llms import HuggingFaceHub
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import LanceDB
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.document_loaders import WebBaseLoader, PyPDFLoader, DirectoryLoader
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnablePassthrough
from prettytable import PrettyTable

HF_TOKEN = &quot;hf*********&quot;
os.environ[&quot;HUGGINGFACEHUB_API_TOKEN&quot;] = HF_TOKEN

# Loading the web URL and breaking down the information into chunks
start_time = time.time()

loader = WebBaseLoader(&quot;https://gameofthrones.fandom.com/wiki/Jon_Snow&quot;)
documents_loader = DirectoryLoader(&apos;data&apos;, glob=&quot;./*.pdf&quot;, loader_cls=PyPDFLoader)

# URL loader
url_docs = loader.load()

# Document loader
data_docs = documents_loader.load()

# Combining all the information into a single variable
docs = url_docs + data_docs

# Specify chunk size and overlap
chunk_size = 256
chunk_overlap = 20
text_splitter = RecursiveCharacterTextSplitter(chunk_size=chunk_size, chunk_overlap=chunk_overlap)
chunks = text_splitter.split_documents(docs)

# Specify Embedding Model
embedding_model_name = &apos;sentence-transformers/all-MiniLM-L6-v2&apos;
embeddings = HuggingFaceEmbeddings(model_name=embedding_model_name, model_kwargs={&apos;device&apos;: &apos;cpu&apos;})

# Specify Vector Database
vectorstore_start_time = time.time()
database_name = &quot;LanceDB&quot;
db = lancedb.connect(&quot;src/lance_database&quot;)
table = db.create_table(
    &quot;rag_sample&quot;,
    data=[
        {
            &quot;vector&quot;: embeddings.embed_query(&quot;Hello World&quot;),
            &quot;text&quot;: &quot;Hello World&quot;,
            &quot;id&quot;: &quot;1&quot;,
        }
    ],
    mode=&quot;overwrite&quot;,
)
docsearch = LanceDB.from_documents(chunks, embeddings, connection=table)
vectorstore_end_time = time.time()

# Specify Retrieval Information
search_kwargs = {&quot;k&quot;: 3}
retriever = docsearch.as_retriever(search_kwargs = {&quot;k&quot;: 3})

# Specify Model Architecture
llm_repo_id = &quot;huggingfaceh4/zephyr-7b-alpha&quot;
model_kwargs = {&quot;temperature&quot;: 0.5, &quot;max_length&quot;: 4096, &quot;max_new_tokens&quot;: 2048}
model = HuggingFaceHub(repo_id=llm_repo_id, model_kwargs=model_kwargs)

template = &quot;&quot;&quot;
{query}
&quot;&quot;&quot;

prompt = ChatPromptTemplate.from_template(template)

rag_chain_start_time = time.time()
rag_chain = (
    {&quot;context&quot;: retriever, &quot;query&quot;: RunnablePassthrough()}
    | prompt
    | model
    | StrOutputParser()
)
rag_chain_end_time = time.time()

def get_complete_sentence(response):
    last_period_index = response.rfind(&apos;.&apos;)
    if last_period_index != -1:
        return response[:last_period_index + 1]
    else:
        return response

# Invoke the RAG chain and retrieve the response
rag_invoke_start_time = time.time()
response = rag_chain.invoke(&quot;Who killed Jon Snow?&quot;)
rag_invoke_end_time = time.time()

# Get the complete sentence
complete_sentence_start_time = time.time()
complete_sentence = get_complete_sentence(response)
complete_sentence_end_time = time.time()

# Create a table
table = PrettyTable()
table.field_names = [&quot;Task&quot;, &quot;Time Taken (Seconds)&quot;]

# Add rows to the table
table.add_row([&quot;Vectorstore Creation&quot;, round(vectorstore_end_time - vectorstore_start_time, 2)])
table.add_row([&quot;RAG Chain Setup&quot;, round(rag_chain_end_time - rag_chain_start_time, 2)])
table.add_row([&quot;RAG Chain Invocation&quot;, round(rag_invoke_end_time - rag_invoke_start_time, 2)])
table.add_row([&quot;Complete Sentence Extraction&quot;, round(complete_sentence_end_time - complete_sentence_start_time, 2)])

# Additional information in the table
table.add_row([&quot;Embedding Model&quot;, embedding_model_name])
table.add_row([&quot;LLM (Language Model) Repo ID&quot;, llm_repo_id])
table.add_row([&quot;Vector Database&quot;, database_name])
table.add_row([&quot;Temperature&quot;, model_kwargs[&quot;temperature&quot;]])
table.add_row([&quot;Max Length Tokens&quot;, model_kwargs[&quot;max_length&quot;]])
table.add_row([&quot;Max New Tokens&quot;, model_kwargs[&quot;max_new_tokens&quot;]])
table.add_row([&quot;Chunk Size&quot;, chunk_size])
table.add_row([&quot;Chunk Overlap&quot;, chunk_overlap])
table.add_row([&quot;Number of Documents&quot;, len(docs)])


print(&quot;\nComplete Sentence:&quot;)
print(complete_sentence)

# Print the table
print(&quot;\nExecution Timings:&quot;)
print(table)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enhance readability and present the execution information in a structured tabular format, I have used &lt;code&gt;PrettyTable&lt;/code&gt; library. You can add it to your virtual environment by using the command &lt;code&gt;pip3 install prettytable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So this is the response I received in less than &amp;lt; 1 minute, which is quite considerable for the starters. The time it takes can vary depending on your system’s configuration, but I believe you’ll get decent results in just a few minutes. So, please be patient if it’s taking a bit longer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Human: 
Question : Who killed Jon Snow?

Answer: 
In the TV series Game of Thrones, Jon Snow was stabbed by his 
fellow Night&apos;s Watch members in season 5, episode 9, 
&quot;The Dance of Dragons.&quot; However, he was later resurrected by Melisandre 
in season 6, episode 3, &quot;Oathbreaker.&quot; So, technically, 
no one killed Jon Snow in the show.


Execution Timings:
+------------------------------+----------------------------------------+
|             Task             |          Time Taken (Seconds)          |
+------------------------------+----------------------------------------+
|     Vectorstore Creation     |                 16.21                  |
|       RAG Chain Setup        |                  0.03                  |
|     RAG Chain Invocation     |                  2.06                  |
| Complete Sentence Extraction |                  0.0                   |
|       Embedding Model        | sentence-transformers/all-MiniLM-L6-v2 |
| LLM (Language Model) Repo ID |     huggingfaceh4/zephyr-7b-alpha      |
|       Vector Database        |                LanceDB                 |
|         Temperature          |                  0.5                   |
|      Max Length Tokens       |                  4096                  |
|        Max New Tokens        |                  2048                  |
|          Chunk Size          |                  256                   |
|        Chunk Overlap         |                   20                   |
|     Number of Documents      |                   39                   |
+------------------------------+----------------------------------------+

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/vipul-maheshwari/vipul-maheshwari.github.io/blob/main/images/make_your_application_with_rag/cat2.png?raw=true&quot; alt=&quot;cat2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Have fun experimenting with various data sources! You can try changing the website addresses, adding new PDF files or maybe change the template a bit. LLMs are fun, you never know what you get!&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;
&lt;p&gt;There are plenty of things we can adjust here. We could switch to a more effective embedding model for better indexing, try different searching techniques for the retriever, add a reranker to improve the ranking of documents, or use a more advanced LLM with a larger context window and faster response times. Essentially, every RAG application is just an enhanced version based on these factors. However, the fundamental concept of how a RAG application works always remains the same.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&quot;https://colab.research.google.com/drive/1YsOfovVdNPBwCDMWHvLfOaNtqXn4qXTs?usp=sharing&quot;&gt;collab&lt;/a&gt; link for the reference..&lt;/p&gt;
</content>
 </entry>
 

</feed>
